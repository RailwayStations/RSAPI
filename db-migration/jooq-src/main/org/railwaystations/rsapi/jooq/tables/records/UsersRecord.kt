/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables.records


import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.railwaystations.rsapi.jooq.tables.UsersTable
import org.railwaystations.rsapi.jooq.tables.pojos.Users


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersRecord private constructor() : UpdatableRecordImpl<UsersRecord>(UsersTable.UsersTable) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var email: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var url: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var ownphotos: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    open var anonymous: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var license: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var key: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var admin: Boolean?
        set(value): Unit = set(8, value)
        get(): Boolean? = get(8) as Boolean?

    open var emailverification: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var sendnotifications: Boolean?
        set(value): Unit = set(10, value)
        get(): Boolean? = get(10) as Boolean?

    open var locale: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(id: Int? = null, name: String? = null, email: String? = null, url: String? = null, ownphotos: Boolean? = null, anonymous: Boolean? = null, license: String? = null, key: String? = null, admin: Boolean? = null, emailverification: String? = null, sendnotifications: Boolean? = null, locale: String? = null): this() {
        this.id = id
        this.name = name
        this.email = email
        this.url = url
        this.ownphotos = ownphotos
        this.anonymous = anonymous
        this.license = license
        this.key = key
        this.admin = admin
        this.emailverification = emailverification
        this.sendnotifications = sendnotifications
        this.locale = locale
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(value: Users?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.email = value.email
            this.url = value.url
            this.ownphotos = value.ownphotos
            this.anonymous = value.anonymous
            this.license = value.license
            this.key = value.key
            this.admin = value.admin
            this.emailverification = value.emailverification
            this.sendnotifications = value.sendnotifications
            this.locale = value.locale
            resetChangedOnNotNull()
        }
    }
}
