/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.railwaystations.rsapi.jooq.Test
import org.railwaystations.rsapi.jooq.indexes.INBOX_IDX_STATION
import org.railwaystations.rsapi.jooq.keys.FK_INBOX_USER
import org.railwaystations.rsapi.jooq.keys.KEY_INBOX_PRIMARY
import org.railwaystations.rsapi.jooq.tables.UsersTable.UsersPath
import org.railwaystations.rsapi.jooq.tables.records.InboxRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InboxTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, InboxRecord>?,
    parentPath: InverseForeignKey<out Record, InboxRecord>?,
    aliased: Table<InboxRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<InboxRecord>(
    alias,
    Test.TEST,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>test.inbox</code>
         */
        val InboxTable: InboxTable = InboxTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<InboxRecord> = InboxRecord::class.java

    /**
     * The column <code>test.inbox.id</code>.
     */
    val id: TableField<InboxRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>test.inbox.photographerId</code>.
     */
    val photographerid: TableField<InboxRecord, Int?> = createField(DSL.name("photographerId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>test.inbox.countryCode</code>.
     */
    val countrycode: TableField<InboxRecord, String?> = createField(DSL.name("countryCode"), SQLDataType.CHAR(2).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "")

    /**
     * The column <code>test.inbox.stationId</code>.
     */
    val stationid: TableField<InboxRecord, String?> = createField(DSL.name("stationId"), SQLDataType.VARCHAR(30).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.inbox.title</code>.
     */
    val title: TableField<InboxRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.inbox.lat</code>.
     */
    val lat: TableField<InboxRecord, Double?> = createField(DSL.name("lat"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "")

    /**
     * The column <code>test.inbox.lon</code>.
     */
    val lon: TableField<InboxRecord, Double?> = createField(DSL.name("lon"), SQLDataType.DOUBLE.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.DOUBLE)), this, "")

    /**
     * The column <code>test.inbox.extension</code>.
     */
    val extension: TableField<InboxRecord, String?> = createField(DSL.name("extension"), SQLDataType.CHAR(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "")

    /**
     * The column <code>test.inbox.comment</code>.
     */
    val comment: TableField<InboxRecord, String?> = createField(DSL.name("comment"), SQLDataType.VARCHAR(1024).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.inbox.rejectReason</code>.
     */
    val rejectreason: TableField<InboxRecord, String?> = createField(DSL.name("rejectReason"), SQLDataType.VARCHAR(1024).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.inbox.done</code>.
     */
    val done: TableField<InboxRecord, Boolean?> = createField(DSL.name("done"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("b'0'"), SQLDataType.BIT)), this, "")

    /**
     * The column <code>test.inbox.problemReportType</code>.
     */
    val problemreporttype: TableField<InboxRecord, String?> = createField(DSL.name("problemReportType"), SQLDataType.VARCHAR(30).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.inbox.active</code>.
     */
    val active: TableField<InboxRecord, Boolean?> = createField(DSL.name("active"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIT)), this, "")

    /**
     * The column <code>test.inbox.crc32</code>.
     */
    val crc32: TableField<InboxRecord, String?> = createField(DSL.name("crc32"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.inbox.notified</code>.
     */
    val notified: TableField<InboxRecord, Boolean?> = createField(DSL.name("notified"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("b'0'"), SQLDataType.BIT)), this, "")

    /**
     * The column <code>test.inbox.createdAt</code>.
     */
    val createdat: TableField<InboxRecord, LocalDateTime?> = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>test.inbox.photoId</code>.
     */
    val photoid: TableField<InboxRecord, Long?> = createField(DSL.name("photoId"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "")

    /**
     * The column <code>test.inbox.posted</code>.
     */
    val posted: TableField<InboxRecord, Boolean?> = createField(DSL.name("posted"), SQLDataType.BIT.defaultValue(DSL.field(DSL.raw("b'0'"), SQLDataType.BIT)), this, "")

    private constructor(alias: Name, aliased: Table<InboxRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<InboxRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<InboxRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>test.inbox</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>test.inbox</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>test.inbox</code> table reference
     */
    constructor(): this(DSL.name("inbox"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, InboxRecord>?, parentPath: InverseForeignKey<out Record, InboxRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, InboxTable, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class InboxPath : InboxTable, Path<InboxRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, InboxRecord>?, parentPath: InverseForeignKey<out Record, InboxRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<InboxRecord>): super(alias, aliased)
        override fun `as`(alias: String): InboxPath = InboxPath(DSL.name(alias), this)
        override fun `as`(alias: Name): InboxPath = InboxPath(alias, this)
        override fun `as`(alias: Table<*>): InboxPath = InboxPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Test.TEST
    override fun getIndexes(): List<Index> = listOf(INBOX_IDX_STATION)
    override fun getIdentity(): Identity<InboxRecord, Int?> = super.getIdentity() as Identity<InboxRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<InboxRecord> = KEY_INBOX_PRIMARY
    override fun getReferences(): List<ForeignKey<InboxRecord, *>> = listOf(FK_INBOX_USER)

    private lateinit var _users: UsersPath

    /**
     * Get the implicit join path to the <code>test.users</code> table.
     */
    fun users(): UsersPath {
        if (!this::_users.isInitialized)
            _users = UsersPath(this, FK_INBOX_USER, null)

        return _users;
    }

    val users: UsersPath
        get(): UsersPath = users()
    override fun `as`(alias: String): InboxTable = InboxTable(DSL.name(alias), this)
    override fun `as`(alias: Name): InboxTable = InboxTable(alias, this)
    override fun `as`(alias: Table<*>): InboxTable = InboxTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): InboxTable = InboxTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): InboxTable = InboxTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): InboxTable = InboxTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): InboxTable = InboxTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): InboxTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): InboxTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): InboxTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): InboxTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): InboxTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): InboxTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): InboxTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): InboxTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): InboxTable = where(DSL.notExists(select))
}
