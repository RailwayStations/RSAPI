/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables


import java.time.Instant

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.railwaystations.rsapi.jooq.Test
import org.railwaystations.rsapi.jooq.keys.KEY_OAUTH2_REGISTERED_CLIENT_PRIMARY
import org.railwaystations.rsapi.jooq.tables.records.Oauth2RegisteredClientRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Oauth2RegisteredClientTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Oauth2RegisteredClientRecord>?,
    parentPath: InverseForeignKey<out Record, Oauth2RegisteredClientRecord>?,
    aliased: Table<Oauth2RegisteredClientRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<Oauth2RegisteredClientRecord>(
    alias,
    Test.TEST,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>test.oauth2_registered_client</code>
         */
        val Oauth2RegisteredClientTable: Oauth2RegisteredClientTable = Oauth2RegisteredClientTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Oauth2RegisteredClientRecord> = Oauth2RegisteredClientRecord::class.java

    /**
     * The column <code>test.oauth2_registered_client.id</code>.
     */
    val id: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>test.oauth2_registered_client.client_id</code>.
     */
    val clientId: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("client_id"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column
     * <code>test.oauth2_registered_client.client_id_issued_at</code>.
     */
    val clientIdIssuedAt: TableField<Oauth2RegisteredClientRecord, Instant?> = createField(DSL.name("client_id_issued_at"), SQLDataType.INSTANT.nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_registered_client.client_secret</code>.
     */
    val clientSecret: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("client_secret"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>test.oauth2_registered_client.client_secret_expires_at</code>.
     */
    val clientSecretExpiresAt: TableField<Oauth2RegisteredClientRecord, Instant?> = createField(DSL.name("client_secret_expires_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_registered_client.client_name</code>.
     */
    val clientName: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("client_name"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column
     * <code>test.oauth2_registered_client.client_authentication_methods</code>.
     */
    val clientAuthenticationMethods: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("client_authentication_methods"), SQLDataType.VARCHAR(1000).nullable(false), this, "")

    /**
     * The column
     * <code>test.oauth2_registered_client.authorization_grant_types</code>.
     */
    val authorizationGrantTypes: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("authorization_grant_types"), SQLDataType.VARCHAR(1000).nullable(false), this, "")

    /**
     * The column <code>test.oauth2_registered_client.redirect_uris</code>.
     */
    val redirectUris: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("redirect_uris"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.oauth2_registered_client.scopes</code>.
     */
    val scopes: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("scopes"), SQLDataType.VARCHAR(1000).nullable(false), this, "")

    /**
     * The column <code>test.oauth2_registered_client.client_settings</code>.
     */
    val clientSettings: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("client_settings"), SQLDataType.VARCHAR(2000).nullable(false), this, "")

    /**
     * The column <code>test.oauth2_registered_client.token_settings</code>.
     */
    val tokenSettings: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("token_settings"), SQLDataType.VARCHAR(2000).nullable(false), this, "")

    /**
     * The column
     * <code>test.oauth2_registered_client.post_logout_redirect_uris</code>.
     */
    val postLogoutRedirectUris: TableField<Oauth2RegisteredClientRecord, String?> = createField(DSL.name("post_logout_redirect_uris"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<Oauth2RegisteredClientRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Oauth2RegisteredClientRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Oauth2RegisteredClientRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>test.oauth2_registered_client</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>test.oauth2_registered_client</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>test.oauth2_registered_client</code> table reference
     */
    constructor(): this(DSL.name("oauth2_registered_client"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Test.TEST
    override fun getPrimaryKey(): UniqueKey<Oauth2RegisteredClientRecord> = KEY_OAUTH2_REGISTERED_CLIENT_PRIMARY
    override fun `as`(alias: String): Oauth2RegisteredClientTable = Oauth2RegisteredClientTable(DSL.name(alias), this)
    override fun `as`(alias: Name): Oauth2RegisteredClientTable = Oauth2RegisteredClientTable(alias, this)
    override fun `as`(alias: Table<*>): Oauth2RegisteredClientTable = Oauth2RegisteredClientTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Oauth2RegisteredClientTable = Oauth2RegisteredClientTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Oauth2RegisteredClientTable = Oauth2RegisteredClientTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Oauth2RegisteredClientTable = Oauth2RegisteredClientTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Oauth2RegisteredClientTable = Oauth2RegisteredClientTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Oauth2RegisteredClientTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Oauth2RegisteredClientTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Oauth2RegisteredClientTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Oauth2RegisteredClientTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Oauth2RegisteredClientTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Oauth2RegisteredClientTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Oauth2RegisteredClientTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Oauth2RegisteredClientTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Oauth2RegisteredClientTable = where(DSL.notExists(select))
}
