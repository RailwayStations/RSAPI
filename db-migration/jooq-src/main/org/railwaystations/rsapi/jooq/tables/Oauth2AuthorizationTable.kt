/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables


import java.time.Instant

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.railwaystations.rsapi.jooq.Test
import org.railwaystations.rsapi.jooq.keys.KEY_OAUTH2_AUTHORIZATION_PRIMARY
import org.railwaystations.rsapi.jooq.tables.records.Oauth2AuthorizationRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Oauth2AuthorizationTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Oauth2AuthorizationRecord>?,
    parentPath: InverseForeignKey<out Record, Oauth2AuthorizationRecord>?,
    aliased: Table<Oauth2AuthorizationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<Oauth2AuthorizationRecord>(
    alias,
    Test.TEST,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>test.oauth2_authorization</code>
         */
        val Oauth2AuthorizationTable: Oauth2AuthorizationTable = Oauth2AuthorizationTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Oauth2AuthorizationRecord> = Oauth2AuthorizationRecord::class.java

    /**
     * The column <code>test.oauth2_authorization.id</code>.
     */
    val id: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("id"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>test.oauth2_authorization.registered_client_id</code>.
     */
    val registeredClientId: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("registered_client_id"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>test.oauth2_authorization.principal_name</code>.
     */
    val principalName: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("principal_name"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.authorization_grant_type</code>.
     */
    val authorizationGrantType: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("authorization_grant_type"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>test.oauth2_authorization.authorized_scopes</code>.
     */
    val authorizedScopes: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("authorized_scopes"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.oauth2_authorization.attributes</code>.
     */
    val attributes: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("attributes"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.state</code>.
     */
    val state: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("state"), SQLDataType.VARCHAR(500).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.authorization_code_value</code>.
     */
    val authorizationCodeValue: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("authorization_code_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.authorization_code_issued_at</code>.
     */
    val authorizationCodeIssuedAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("authorization_code_issued_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.authorization_code_expires_at</code>.
     */
    val authorizationCodeExpiresAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("authorization_code_expires_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.authorization_code_metadata</code>.
     */
    val authorizationCodeMetadata: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("authorization_code_metadata"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.access_token_value</code>.
     */
    val accessTokenValue: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("access_token_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.access_token_issued_at</code>.
     */
    val accessTokenIssuedAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("access_token_issued_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.access_token_expires_at</code>.
     */
    val accessTokenExpiresAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("access_token_expires_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_authorization.access_token_metadata</code>.
     */
    val accessTokenMetadata: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("access_token_metadata"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.access_token_type</code>.
     */
    val accessTokenType: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("access_token_type"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.oauth2_authorization.access_token_scopes</code>.
     */
    val accessTokenScopes: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("access_token_scopes"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    /**
     * The column <code>test.oauth2_authorization.oidc_id_token_value</code>.
     */
    val oidcIdTokenValue: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("oidc_id_token_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.oidc_id_token_issued_at</code>.
     */
    val oidcIdTokenIssuedAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("oidc_id_token_issued_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.oidc_id_token_expires_at</code>.
     */
    val oidcIdTokenExpiresAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("oidc_id_token_expires_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_authorization.oidc_id_token_metadata</code>.
     */
    val oidcIdTokenMetadata: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("oidc_id_token_metadata"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.refresh_token_value</code>.
     */
    val refreshTokenValue: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("refresh_token_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.refresh_token_issued_at</code>.
     */
    val refreshTokenIssuedAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("refresh_token_issued_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column
     * <code>test.oauth2_authorization.refresh_token_expires_at</code>.
     */
    val refreshTokenExpiresAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("refresh_token_expires_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_authorization.refresh_token_metadata</code>.
     */
    val refreshTokenMetadata: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("refresh_token_metadata"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.user_code_value</code>.
     */
    val userCodeValue: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("user_code_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.user_code_issued_at</code>.
     */
    val userCodeIssuedAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("user_code_issued_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_authorization.user_code_expires_at</code>.
     */
    val userCodeExpiresAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("user_code_expires_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_authorization.user_code_metadata</code>.
     */
    val userCodeMetadata: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("user_code_metadata"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.device_code_value</code>.
     */
    val deviceCodeValue: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("device_code_value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>test.oauth2_authorization.device_code_issued_at</code>.
     */
    val deviceCodeIssuedAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("device_code_issued_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_authorization.device_code_expires_at</code>.
     */
    val deviceCodeExpiresAt: TableField<Oauth2AuthorizationRecord, Instant?> = createField(DSL.name("device_code_expires_at"), SQLDataType.INSTANT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INSTANT)), this, "")

    /**
     * The column <code>test.oauth2_authorization.device_code_metadata</code>.
     */
    val deviceCodeMetadata: TableField<Oauth2AuthorizationRecord, String?> = createField(DSL.name("device_code_metadata"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    private constructor(alias: Name, aliased: Table<Oauth2AuthorizationRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Oauth2AuthorizationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Oauth2AuthorizationRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>test.oauth2_authorization</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>test.oauth2_authorization</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>test.oauth2_authorization</code> table reference
     */
    constructor(): this(DSL.name("oauth2_authorization"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Test.TEST
    override fun getPrimaryKey(): UniqueKey<Oauth2AuthorizationRecord> = KEY_OAUTH2_AUTHORIZATION_PRIMARY
    override fun `as`(alias: String): Oauth2AuthorizationTable = Oauth2AuthorizationTable(DSL.name(alias), this)
    override fun `as`(alias: Name): Oauth2AuthorizationTable = Oauth2AuthorizationTable(alias, this)
    override fun `as`(alias: Table<*>): Oauth2AuthorizationTable = Oauth2AuthorizationTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Oauth2AuthorizationTable = Oauth2AuthorizationTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Oauth2AuthorizationTable = Oauth2AuthorizationTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Oauth2AuthorizationTable = Oauth2AuthorizationTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Oauth2AuthorizationTable = Oauth2AuthorizationTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Oauth2AuthorizationTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Oauth2AuthorizationTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Oauth2AuthorizationTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Oauth2AuthorizationTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Oauth2AuthorizationTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Oauth2AuthorizationTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Oauth2AuthorizationTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Oauth2AuthorizationTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Oauth2AuthorizationTable = where(DSL.notExists(select))
}
