/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables.records


import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.railwaystations.rsapi.jooq.tables.PhotosTable
import org.railwaystations.rsapi.jooq.tables.pojos.Photos


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PhotosRecord private constructor() : UpdatableRecordImpl<PhotosRecord>(PhotosTable.PhotosTable) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var countrycode: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var stationid: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var primary: Boolean?
        set(value): Unit = set(3, value)
        get(): Boolean? = get(3) as Boolean?

    open var outdated: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    open var urlpath: String
        set(value): Unit = set(5, value)
        get(): String = get(5) as String

    open var license: String
        set(value): Unit = set(6, value)
        get(): String = get(6) as String

    open var photographerid: Int
        set(value): Unit = set(7, value)
        get(): Int = get(7) as Int

    open var createdat: String
        set(value): Unit = set(8, value)
        get(): String = get(8) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised PhotosRecord
     */
    constructor(id: Long? = null, countrycode: String, stationid: String, primary: Boolean? = null, outdated: Boolean? = null, urlpath: String, license: String, photographerid: Int, createdat: String): this() {
        this.id = id
        this.countrycode = countrycode
        this.stationid = stationid
        this.primary = primary
        this.outdated = outdated
        this.urlpath = urlpath
        this.license = license
        this.photographerid = photographerid
        this.createdat = createdat
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised PhotosRecord
     */
    constructor(value: Photos?): this() {
        if (value != null) {
            this.id = value.id
            this.countrycode = value.countrycode
            this.stationid = value.stationid
            this.primary = value.primary
            this.outdated = value.outdated
            this.urlpath = value.urlpath
            this.license = value.license
            this.photographerid = value.photographerid
            this.createdat = value.createdat
            resetChangedOnNotNull()
        }
    }
}
