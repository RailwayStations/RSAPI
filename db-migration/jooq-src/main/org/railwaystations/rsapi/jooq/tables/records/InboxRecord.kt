/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.railwaystations.rsapi.jooq.tables.InboxTable
import org.railwaystations.rsapi.jooq.tables.pojos.Inbox


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class InboxRecord private constructor() : UpdatableRecordImpl<InboxRecord>(InboxTable.InboxTable) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var photographerid: Int
        set(value): Unit = set(1, value)
        get(): Int = get(1) as Int

    open var countrycode: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var stationid: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var title: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var lat: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    open var lon: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    open var extension: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var comment: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var rejectreason: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    open var done: Boolean?
        set(value): Unit = set(10, value)
        get(): Boolean? = get(10) as Boolean?

    open var problemreporttype: String?
        set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    open var active: Boolean?
        set(value): Unit = set(12, value)
        get(): Boolean? = get(12) as Boolean?

    open var crc32: String?
        set(value): Unit = set(13, value)
        get(): String? = get(13) as String?

    open var notified: Boolean?
        set(value): Unit = set(14, value)
        get(): Boolean? = get(14) as Boolean?

    open var createdat: LocalDateTime?
        set(value): Unit = set(15, value)
        get(): LocalDateTime? = get(15) as LocalDateTime?

    open var photoid: Long?
        set(value): Unit = set(16, value)
        get(): Long? = get(16) as Long?

    open var posted: Boolean?
        set(value): Unit = set(17, value)
        get(): Boolean? = get(17) as Boolean?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised InboxRecord
     */
    constructor(id: Int? = null, photographerid: Int, countrycode: String? = null, stationid: String? = null, title: String? = null, lat: Double? = null, lon: Double? = null, extension: String? = null, comment: String? = null, rejectreason: String? = null, done: Boolean? = null, problemreporttype: String? = null, active: Boolean? = null, crc32: String? = null, notified: Boolean? = null, createdat: LocalDateTime? = null, photoid: Long? = null, posted: Boolean? = null): this() {
        this.id = id
        this.photographerid = photographerid
        this.countrycode = countrycode
        this.stationid = stationid
        this.title = title
        this.lat = lat
        this.lon = lon
        this.extension = extension
        this.comment = comment
        this.rejectreason = rejectreason
        this.done = done
        this.problemreporttype = problemreporttype
        this.active = active
        this.crc32 = crc32
        this.notified = notified
        this.createdat = createdat
        this.photoid = photoid
        this.posted = posted
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised InboxRecord
     */
    constructor(value: Inbox?): this() {
        if (value != null) {
            this.id = value.id
            this.photographerid = value.photographerid
            this.countrycode = value.countrycode
            this.stationid = value.stationid
            this.title = value.title
            this.lat = value.lat
            this.lon = value.lon
            this.extension = value.extension
            this.comment = value.comment
            this.rejectreason = value.rejectreason
            this.done = value.done
            this.problemreporttype = value.problemreporttype
            this.active = value.active
            this.crc32 = value.crc32
            this.notified = value.notified
            this.createdat = value.createdat
            this.photoid = value.photoid
            this.posted = value.posted
            resetChangedOnNotNull()
        }
    }
}
