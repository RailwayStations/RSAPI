/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables.records


import java.time.Instant

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.railwaystations.rsapi.jooq.tables.Oauth2RegisteredClientTable
import org.railwaystations.rsapi.jooq.tables.pojos.Oauth2RegisteredClient


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Oauth2RegisteredClientRecord private constructor() : UpdatableRecordImpl<Oauth2RegisteredClientRecord>(Oauth2RegisteredClientTable.Oauth2RegisteredClientTable) {

    open var id: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    open var clientId: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var clientIdIssuedAt: Instant?
        set(value): Unit = set(2, value)
        get(): Instant? = get(2) as Instant?

    open var clientSecret: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var clientSecretExpiresAt: Instant?
        set(value): Unit = set(4, value)
        get(): Instant? = get(4) as Instant?

    open var clientName: String
        set(value): Unit = set(5, value)
        get(): String = get(5) as String

    open var clientAuthenticationMethods: String
        set(value): Unit = set(6, value)
        get(): String = get(6) as String

    open var authorizationGrantTypes: String
        set(value): Unit = set(7, value)
        get(): String = get(7) as String

    open var redirectUris: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var scopes: String
        set(value): Unit = set(9, value)
        get(): String = get(9) as String

    open var clientSettings: String
        set(value): Unit = set(10, value)
        get(): String = get(10) as String

    open var tokenSettings: String
        set(value): Unit = set(11, value)
        get(): String = get(11) as String

    open var postLogoutRedirectUris: String?
        set(value): Unit = set(12, value)
        get(): String? = get(12) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    /**
     * Create a detached, initialised Oauth2RegisteredClientRecord
     */
    constructor(id: String, clientId: String, clientIdIssuedAt: Instant? = null, clientSecret: String? = null, clientSecretExpiresAt: Instant? = null, clientName: String, clientAuthenticationMethods: String, authorizationGrantTypes: String, redirectUris: String? = null, scopes: String, clientSettings: String, tokenSettings: String, postLogoutRedirectUris: String? = null): this() {
        this.id = id
        this.clientId = clientId
        this.clientIdIssuedAt = clientIdIssuedAt
        this.clientSecret = clientSecret
        this.clientSecretExpiresAt = clientSecretExpiresAt
        this.clientName = clientName
        this.clientAuthenticationMethods = clientAuthenticationMethods
        this.authorizationGrantTypes = authorizationGrantTypes
        this.redirectUris = redirectUris
        this.scopes = scopes
        this.clientSettings = clientSettings
        this.tokenSettings = tokenSettings
        this.postLogoutRedirectUris = postLogoutRedirectUris
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised Oauth2RegisteredClientRecord
     */
    constructor(value: Oauth2RegisteredClient?): this() {
        if (value != null) {
            this.id = value.id
            this.clientId = value.clientId
            this.clientIdIssuedAt = value.clientIdIssuedAt
            this.clientSecret = value.clientSecret
            this.clientSecretExpiresAt = value.clientSecretExpiresAt
            this.clientName = value.clientName
            this.clientAuthenticationMethods = value.clientAuthenticationMethods
            this.authorizationGrantTypes = value.authorizationGrantTypes
            this.redirectUris = value.redirectUris
            this.scopes = value.scopes
            this.clientSettings = value.clientSettings
            this.tokenSettings = value.tokenSettings
            this.postLogoutRedirectUris = value.postLogoutRedirectUris
            resetChangedOnNotNull()
        }
    }
}
