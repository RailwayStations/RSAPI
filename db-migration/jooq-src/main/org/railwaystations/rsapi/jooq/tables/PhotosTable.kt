/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables


import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.railwaystations.rsapi.jooq.Test
import org.railwaystations.rsapi.jooq.keys.FK_PHOTO_STATION
import org.railwaystations.rsapi.jooq.keys.FK_PHOTO_USER
import org.railwaystations.rsapi.jooq.keys.KEY_PHOTOS_PRIMARY
import org.railwaystations.rsapi.jooq.tables.StationsTable.StationsPath
import org.railwaystations.rsapi.jooq.tables.UsersTable.UsersPath
import org.railwaystations.rsapi.jooq.tables.records.PhotosRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PhotosTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PhotosRecord>?,
    parentPath: InverseForeignKey<out Record, PhotosRecord>?,
    aliased: Table<PhotosRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<PhotosRecord>(
    alias,
    Test.TEST,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>test.photos</code>
         */
        val PhotosTable: PhotosTable = PhotosTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PhotosRecord> = PhotosRecord::class.java

    /**
     * The column <code>test.photos.id</code>.
     */
    val id: TableField<PhotosRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>test.photos.countryCode</code>.
     */
    val countrycode: TableField<PhotosRecord, String?> = createField(DSL.name("countryCode"), SQLDataType.CHAR(2).nullable(false), this, "")

    /**
     * The column <code>test.photos.stationId</code>.
     */
    val stationid: TableField<PhotosRecord, String?> = createField(DSL.name("stationId"), SQLDataType.VARCHAR(30).nullable(false), this, "")

    /**
     * The column <code>test.photos.primary</code>.
     */
    val primary: TableField<PhotosRecord, Boolean?> = createField(DSL.name("primary"), SQLDataType.BIT.nullable(false).defaultValue(DSL.field(DSL.raw("b'1'"), SQLDataType.BIT)), this, "")

    /**
     * The column <code>test.photos.outdated</code>.
     */
    val outdated: TableField<PhotosRecord, Boolean?> = createField(DSL.name("outdated"), SQLDataType.BIT.nullable(false).defaultValue(DSL.field(DSL.raw("b'0'"), SQLDataType.BIT)), this, "")

    /**
     * The column <code>test.photos.urlPath</code>.
     */
    val urlpath: TableField<PhotosRecord, String?> = createField(DSL.name("urlPath"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>test.photos.license</code>.
     */
    val license: TableField<PhotosRecord, String?> = createField(DSL.name("license"), SQLDataType.VARCHAR(100).nullable(false), this, "")

    /**
     * The column <code>test.photos.photographerId</code>.
     */
    val photographerid: TableField<PhotosRecord, Int?> = createField(DSL.name("photographerId"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>test.photos.createdAt</code>.
     */
    val createdat: TableField<PhotosRecord, String?> = createField(DSL.name("createdAt"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PhotosRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<PhotosRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<PhotosRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>test.photos</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>test.photos</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>test.photos</code> table reference
     */
    constructor(): this(DSL.name("photos"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PhotosRecord>?, parentPath: InverseForeignKey<out Record, PhotosRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PhotosTable, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PhotosPath : PhotosTable, Path<PhotosRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, PhotosRecord>?, parentPath: InverseForeignKey<out Record, PhotosRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<PhotosRecord>): super(alias, aliased)
        override fun `as`(alias: String): PhotosPath = PhotosPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PhotosPath = PhotosPath(alias, this)
        override fun `as`(alias: Table<*>): PhotosPath = PhotosPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Test.TEST
    override fun getIdentity(): Identity<PhotosRecord, Long?> = super.getIdentity() as Identity<PhotosRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<PhotosRecord> = KEY_PHOTOS_PRIMARY
    override fun getReferences(): List<ForeignKey<PhotosRecord, *>> = listOf(FK_PHOTO_STATION, FK_PHOTO_USER)

    private lateinit var _stations: StationsPath

    /**
     * Get the implicit join path to the <code>test.stations</code> table.
     */
    fun stations(): StationsPath {
        if (!this::_stations.isInitialized)
            _stations = StationsPath(this, FK_PHOTO_STATION, null)

        return _stations;
    }

    val stations: StationsPath
        get(): StationsPath = stations()

    private lateinit var _users: UsersPath

    /**
     * Get the implicit join path to the <code>test.users</code> table.
     */
    fun users(): UsersPath {
        if (!this::_users.isInitialized)
            _users = UsersPath(this, FK_PHOTO_USER, null)

        return _users;
    }

    val users: UsersPath
        get(): UsersPath = users()
    override fun `as`(alias: String): PhotosTable = PhotosTable(DSL.name(alias), this)
    override fun `as`(alias: Name): PhotosTable = PhotosTable(alias, this)
    override fun `as`(alias: Table<*>): PhotosTable = PhotosTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PhotosTable = PhotosTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PhotosTable = PhotosTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PhotosTable = PhotosTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PhotosTable = PhotosTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PhotosTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PhotosTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PhotosTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PhotosTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PhotosTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PhotosTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PhotosTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PhotosTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PhotosTable = where(DSL.notExists(select))
}
