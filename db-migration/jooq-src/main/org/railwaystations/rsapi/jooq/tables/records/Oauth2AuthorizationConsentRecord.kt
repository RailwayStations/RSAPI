/*
 * This file is generated by jOOQ.
 */
package org.railwaystations.rsapi.jooq.tables.records


import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl
import org.railwaystations.rsapi.jooq.tables.Oauth2AuthorizationConsentTable
import org.railwaystations.rsapi.jooq.tables.pojos.Oauth2AuthorizationConsent


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Oauth2AuthorizationConsentRecord private constructor() : UpdatableRecordImpl<Oauth2AuthorizationConsentRecord>(Oauth2AuthorizationConsentTable.Oauth2AuthorizationConsentTable) {

    open var registeredClientId: String
        set(value): Unit = set(0, value)
        get(): String = get(0) as String

    open var principalName: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var authorities: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<String?, String?> = super.key() as Record2<String?, String?>

    /**
     * Create a detached, initialised Oauth2AuthorizationConsentRecord
     */
    constructor(registeredClientId: String, principalName: String, authorities: String): this() {
        this.registeredClientId = registeredClientId
        this.principalName = principalName
        this.authorities = authorities
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised Oauth2AuthorizationConsentRecord
     */
    constructor(value: Oauth2AuthorizationConsent?): this() {
        if (value != null) {
            this.registeredClientId = value.registeredClientId
            this.principalName = value.principalName
            this.authorities = value.authorities
            resetChangedOnNotNull()
        }
    }
}
