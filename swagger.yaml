swagger: '2.0'
info:
  description: >-
    Backend Service for the
    https://play.google.com/store/apps/details?id=de.bahnhoefe.deutschlands.bahnhofsfotos
    App of the Bahnhofsfotos opendata Project http://www.railway-stations.org/.
  version: '20170716.1230'
  title: RSAPI
  license:
    name: MIT
    url: 'https://github.com/RailwayStations/RSAPI/blob/master/LICENSE.txt'
host: api.railway-stations.org
basePath: /
tags:
- name: bahnhofsfotos
  description: Photos of railway stations
  externalDocs:
    description: Find out more
    url: 'http://www.railway-stations.org'
schemes:
- https
paths:
  '/{country}/stations':
    get:
      summary: Finds railway stations by various query criteria
      produces:
      - application/service+xml
      - application/json
      - text/plain
      parameters:
      - name: country
        in: path
        description: filter by country code
        required: true
        type: string
      - name: hasPhoto
        in: query
        description: filter by photo availalbe/missing
        required: false
        type: boolean
      - name: photographer
        in: query
        description: filter by nickname of a photographer
        required: false
        type: string
      - name: maxDistance
        in: query
        description: filter by max distance from the coordinates given by lat and lon
        required: false
        type: integer
        format: int64
      - name: lat
        in: query
        description: latitute of the coordinates to filter by max distance
        required: false
        type: number
        format: double
      - name: lon
        in: query
        description: longitude of the coordinates to filter by max distance
        required: false
        type: number
        format: double
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Station'
        '404':
          description: Country not found
  /stations:
    get:
      summary: Finds railway stations by various query criteria
      produces:
      - application/xml
      - application/json
      - text/plain
      parameters:
      - name: country
        in: query
        description: filter by country code
        required: false
        type: string
      - name: hasPhoto
        in: query
        description: filter by photo availalbe/missing
        required: false
        type: boolean
      - name: photographer
        in: query
        description: filter by nickname of a photographer
        required: false
        type: string
      - name: maxDistance
        in: query
        description: filter by max distance from the coordinates given by lat and lon
        required: false
        type: integer
        format: int64
      - name: lat
        in: query
        description: latitute of the coordinates to filter by max distance
        required: false
        type: number
        format: double
      - name: lon
        in: query
        description: longitude of the coordinates to filter by max distance
        required: false
        type: number
        format: double
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Station'
  '/{country}/stations/{id}':
    get:
      summary: Find a railway station by its ID
      produces:
      - application/json
      parameters:
      - name: country
        in: path
        description: country code
        required: true
        type: string
      - name: id
        in: path
        description: id of the station
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Station'
        '404':
          description: Country not found
  '/{country}/photographers':
    get:
      summary: >-
        List of all photographers of a given country with their number of photos
        taken
      produces:
      - text/plain
      - application/json
      parameters:
      - name: country
        in: path
        description: filter by country code
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Photographers'
        '404':
          description: Country not found
  /photographers:
    get:
      summary: List of all photographers with their number of photos taken
      produces:
      - text/plain
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Photographers'
  '/{country}/stats':
    get:
      summary: Statistic of photos with and without photos by country
      produces:
      - text/plain
      - application/json
      parameters:
      - name: country
        in: path
        description: filter by country code
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Statistic'
        '404':
          description: Country not found
  /stats:
    get:
      summary: Overall statistic of photos with and without photos
      produces:
      - text/plain
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Statistic'
        '404':
          description: Country not found
  /countries:
    get:
      summary: List of all supported countries with their configuration
      produces:
      - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Country'
  /photoUpload:
    post:
      summary: Upload a new Photo
      consumes:
      - image/jpeg
      - image/png
      produces:
      - application/json
      parameters:
      - name: image
        in: body
        description: image
        required: true
        schema:
          type: string
          format: byte
      - name: Upload-Token
        in: header
        description: Upload Token
        required: true
        type: string
      - name: Nickname
        in: header
        description: nickname of the user, only used for old UploadTokens
        required: false
        type: string
      - name: Email
        in: header
        description: email of the user
        required: true
        type: string
      - name: Country
        in: header
        description: country code
        required: true
        type: string
      - name: Station-Id
        in: header
        description: id of the railwaystation
        required: true
        type: string
      - name: Content-Type
        in: header
        description: mime type of the image, "image/png" or "image/jpeg"
        required: true
        type: string
      responses:
        '202':
          description: upload successful
        '400':
          description: wrong request
        '401':
          description: wrong token
        '409':
          description: photo already exists
        '413':
          description: image too large (maximum 20 MB)
  /registration:
    post:
      summary: Register for an upload token
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: registration
        in: body
        description: Registration information
        required: true
        schema:
          $ref: '#/definitions/Profile'
      responses:
        '202':
          description: registration accepted
        '400':
          description: wrong request
        '409':
          description: conflict with existing name or email
        '422':
          description: unprocessable entity, Registration input document error
  /registration/withGoogleIdToken:
    post:
      summary: Register for an upload token with Google IdToken
      produces:
      - application/json
      parameters:
      - name: Google-Id-Token
        in: header
        description: Google IdToken
        required: true
        type: string
      responses:
        '202':
          description: registration accepted, if the email is verified the response contains the full profile with uploadToken
          schema:
            $ref: '#/definitions/Profile'
        '400':
          description: wrong request
        '409':
          description: conflict with existing name or email
  /myProfile:
    get:
      summary: Get the users profile
      produces:
      - application/json
      parameters:
      - name: Upload-Token
        in: header
        description: Upload Token
        required: true
        type: string
      - name: Nickname
        in: header
        description: nickname of the user, only used for old UploadTokens
        required: false
        type: string
      - name: Email
        in: header
        description: email of the user
        required: true
        type: string
      responses:
        '200':
          description: ok
          schema:
            $ref: '#/definitions/Profile'
        '401':
          description: wrong token
    post:
      summary: Update the users profile
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: Upload-Token
        in: header
        description: Upload Token
        required: true
        type: string
      - name: Nickname
        in: header
        description: nickname of the user, only used for old UploadTokens
        required: false
        type: string
      - name: Email
        in: header
        description: email of the user
        required: true
        type: string
      - name: profile
        in: body
        description: Userprofile
        required: true
        schema:
          $ref: '#/definitions/Profile'
      responses:
        '200':
          description: ok
        '401':
          description: wrong token
        '409':
          description: conflict with existing name or email
definitions:
  Station:
    type: object
    properties:
      idStr:
        type: string
        description: Unique ID of the station per country
      id:
        type: integer
        format: int64
        description: DEPRECATED! Unique (numeric) ID of the station per country
      country:
        type: string
        description: Two character country code
      title:
        type: string
        description: Name of the station
      photographer:
        type: string
        description: Nickname of the photographer
      photographerUrl:
        type: string
        description: Link to the photographer
      photoUrl:
        type: string
        description: URL of the photo
      license:
        type: string
        description: License of the photo, clients need to link to an online version of the license text
      licenseUrl:
        type: string
        description: The URL of the license text. Clients should use this to link to the online version of the license text
      lat:
        type: number
        format: double
        description: Latitude of the station
      lon:
        type: number
        format: double
        description: Longitute of the station
      createdAt:
        type: number
        format: int64
        description: Timestamp when the photo was created in the railway-stations database (Milliseconds since 1.1.1970)
      DS100:
        type: string
        description: A short code of the station, depending on the country
  Photographers:
    type: object
    description: >-
      JSON Object with photographers nickname as parameter and number of photos
      as their value
  Statistic:
    type: object
    description: Statistic of number of stations with and without photos
    properties:
      total:
        type: integer
        format: int64
      withPhoto:
        type: integer
        format: int64
      withoutPhoto:
        type: integer
        format: int64
      photographers:
        type: integer
        format: int64
  Country:
    type: object
    description: Supported Country with its configuration
    properties:
      code:
        type: string
        description: Two letter country code
      email:
        type: string
        description: Email Address to send photos to
      twitterTags:
        type: string
        description: Twitter Tags when sharing the photo on Twitter
      timetableUrlTemplate:
        type: string
        description: URL template for the timetable, contains {title}, {id} and {DS100} placeholders which need to be replaced
  Profile:
    type: object
    description: User profile information
    properties:
      nickname:
        type: string
      email:
        type: string
        format: email
      license:
        enum:
        - CC0
        - CC0 1.0 Universell (CC0 1.0)
        - CC4
        - CC BY-SA 4.0
        type: string
      photoOwner:
        type: boolean
      link:
        type: string
      anonymous:
        type: boolean
      uploadToken:
        description: only filled in responses for verified Google IdToken registrations
        type: string
