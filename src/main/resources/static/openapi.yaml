---
openapi: 3.0.1
info:
  title: RSAPI
  description: |
    Backend Service for https://www.railway-stations.org/. 
    Sourcecode available at: https://github.com/RailwayStations/RSAPI.
  license:
    name: MIT
    url: https://github.com/RailwayStations/RSAPI/blob/master/LICENSE.txt
  version: "20220904.1245"
servers:
  - url: https://api.railway-stations.org/
tags:
  - name: bahnhofsfotos
    description: Photos of railway stations
    externalDocs:
      description: Find out more
      url: https://www.railway-stations.org
paths:
  /{country}/stations:
    get:
      summary: Finds railway stations by various query criteria
      deprecated: true
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
        - name: hasPhoto
          in: query
          description: filter by photo availalbe/missing
          schema:
            type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          schema:
            type: string
        - name: maxDistance
          in: query
          description: |
            filter by max distance from the coordinates given by lat and lon
          schema:
            type: integer
            format: int64
        - name: lat
          in: query
          description: latitute of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: lon
          in: query
          description: longitude of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: active
          in: query
          description: filter on active/inactive stations
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
        404:
          description: Country not found
          content: {}
  /stations:
    get:
      summary: Finds railway stations by various query criteria
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: array
            items:
              type: string
        - name: hasPhoto
          in: query
          description: filter by photo availalbe/missing
          schema:
            type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          schema:
            type: string
        - name: maxDistance
          in: query
          description: |
            filter by max distance from the coordinates given by lat and lon
          schema:
            type: integer
            format: int64
        - name: lat
          in: query
          description: latitute of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: lon
          in: query
          description: longitude of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: active
          in: query
          description: filter on active/inactive stations
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
  /{country}/stations/{id}:
    get:
      summary: Find a railway station by its ID
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the station
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
        404:
          description: Station not found
          content: {}
  /recentPhotoImports:
    get:
      summary: List stations with photo uploads in the las 24h
      parameters:
        - name: sinceHours
          in: query
          description: |
            defines the timeframe since when to look for recent photo uploads,
            default is 10h
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
  /{country}/photographers:
    get:
      summary: List of all photographers of a given country with their number of photos taken
      deprecated: true
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /{country}/photographers.txt:
    get:
      summary: List of all photographers of a given country with their number of photos taken
      deprecated: true
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /{country}/photographers.json:
    get:
      summary: List of all photographers of a given country with their number of photos taken
      deprecated: true
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /photographers:
    get:
      summary: List of all photographers with their number of photos taken
      parameters:
        - name: country
          in: header
          description: filter by country code
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /photographers.json:
    get:
      summary: List of all photographers with their number of photos taken
      parameters:
        - name: country
          in: header
          description: filter by country code
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /photographers.txt:
    get:
      summary: List of all photographers with their number of photos taken
      parameters:
        - name: country
          in: header
          description: filter by country code
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /{country}/stats:
    get:
      summary: Statistic of photos with and without photos by country
      deprecated: true
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /{country}/stats.json:
    get:
      summary: Statistic of photos with and without photos by country
      deprecated: true
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /{country}/stats.txt:
    get:
      summary: Statistic of photos with and without photos by country
      deprecated: true
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /stats:
    get:
      summary: Overall statistic of photos with and without photos
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        404:
          description: Country not found
          content: {}
  /stats.json:
    get:
      summary: Overall statistic of photos with and without photos
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        404:
          description: Country not found
          content: {}
  /stats.txt:
    get:
      summary: Overall statistic of photos with and without photos
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /countries:
    get:
      summary: List of all supported countries with their configuration
      parameters:
        - name: onlyActive
          in: query
          description: return only active countries? Defaults to true.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
  /countries.json:
    get:
      summary: List of all supported countries with their configuration
      parameters:
        - name: onlyActive
          in: query
          description: return only active countries? Defaults to true.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
  /photoUpload:
    post:
      summary: Upload a new Photo
      security:
        - basicAuth: []
        - uploadToken: []
      parameters:
        - name: Email
          in: header
          description: |
            Email or name of the user, used together with the uploadToken security
          deprecated: true
          required: false
          schema:
            type: string
        - name: Country
          in: header
          description: country code
          schema:
            type: string
        - name: Station-Id
          in: header
          description: id of the railwaystation
          schema:
            type: string
        - name: Content-Type
          in: header
          description: mime type of the image, "image/png" or "image/jpeg"
          required: true
          schema:
            type: string
        - name: Station-Title
          in: header
          description: name of the station, for upload of missing stations (needs to
            be URL-encoded with UTF-8 charset)
          schema:
            type: string
        - name: Latitude
          in: header
          description: latitude, for upload of missing stations
          schema:
            type: number
            format: double
        - name: Longitude
          in: header
          description: longitude, for upload of missing stations
          schema:
            type: number
            format: double
        - name: Comment
          in: header
          description: comment of the photographer to the reviewer (needs to be URL-encoded
            with UTF-8 charset)
          schema:
            type: string
        - name: Active
          in: header
          description: is this station active?
          schema:
            type: boolean
      requestBody:
        description: image, required for existing station, optional for missing stations
        content:
          image/jpeg:
            schema:
              type: string
              format: byte
          image/png:
            schema:
              type: string
              format: byte
          application/octet-stream:
            schema:
              type: string
              format: byte
      responses:
        202:
          description: upload successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        401:
          description: authorization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        403:
          description: forbidden
          content: {}
        409:
          description: photo already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        413:
          description: image too large (maximum 20 MB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
      x-codegen-request-body-name: image
  /reportProblem:
    post:
      summary: Report a for a Railway-Station
      security:
        - basicAuth: []
      requestBody:
        description: The problem report
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ProblemReport'
        required: true
      responses:
        202:
          description: report successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        401:
          description: authorization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        403:
          description: forbidden
          content: {}
      x-codegen-request-body-name: problemReport
  /userInbox:
    post:
      summary: Query the state of photo uploads of the authorized user
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InboxStateQueryRequest'
        required: true
      responses:
        200:
          description: array UploadStateQuery objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboxStateQueryResponse'
      x-codegen-request-body-name: UploadStateQueries
  /publicInbox:
    get:
      summary: Get the current public inbox, stations where photos have been uploaded
      responses:
        200:
          description: array of public inbox objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicInboxEntry'
  /adminInboxCount:
    get:
      summary: Count pending inbox items
      responses:
        200:
          description: count of pending inbox items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxCountResponse'
  /nextZ:
    get:
      summary: Get next Z-StationId for missing stations
      responses:
        200:
          description: next Z-StationId value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NextZResponse'
  /adminInbox:
    get:
      summary: Get the current inbox, photos and problem reports under review.
      security:
        - basicAuth: []
      responses:
        200:
          description: array of inbox objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboxEntry'
        401:
          description: not authorized
          content: {}
        403:
          description: forbidden
          content: {}
    post:
      summary: |
        Import or reject an uploaded photo or a problem report from the inbox
      security:
        - basicAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxCommand'
        required: true
      responses:
        200:
          description: command successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInboxCommandResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInboxCommandResponse'
        401:
          description: not authorized
          content: {}
        403:
          description: forbidden
          content: {}
      x-codegen-request-body-name: UploadCommand
  /registration:
    post:
      summary: Register for an account
      requestBody:
        description: Registration information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterProfile'
        required: true
      responses:
        202:
          description: registration accepted
          content: {}
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        409:
          description: conflict with existing name or email
          content:
            text/plain:
              schema:
                type: string
        422:
          description: unprocessable entity, Registration input document error
          content: {}
      x-codegen-request-body-name: registration
  /emailVerification/{token}:
    get:
      summary: Verify eMail-Address with verification token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: email successfully verified
          content:
            text/plain:
              schema:
                type: string
        404:
          description: token not found, verification failed
          content: {}
  /resendEmailVerification:
    post:
      summary: Sends a new eMail-Verification mail
      security:
        - basicAuth: []
      responses:
        200:
          description: email successfully sent
          content: {}
  /resetPassword:
    post:
      summary: Requests a new password only
      parameters:
        - name: NameOrEmail
          in: header
          description: name or email of the user
          required: true
          schema:
            type: string
      responses:
        202:
          description: request accepted, email with new password will be sent
          content: {}
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /changePassword:
    post:
      summary: Change user password
      security:
        - basicAuth: []
      parameters:
        - name: New-Password
          in: header
          description: new password, deprecated use body message for proper encoding
          deprecated: true
          required: false
          schema:
            type: string
      requestBody:
        description: ChangePassword
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: false
      responses:
        200:
          description: password changed
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: User not found
          content: {}
  /myProfile:
    get:
      summary: Get the users profile
      security:
        - basicAuth: []
        - uploadToken: []
      parameters:
        - name: Email
          in: header
          description: |
            Email or name of the user, used together with the uploadToken security
          deprecated: true
          required: false
          schema:
            type: string
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        401:
          description: authorization failed
          content: {}
        403:
          description: forbidden
          content: {}
    post:
      summary: Update the users profile. 
      description: |
        In case the email has been changed, only the email is saved and a new password is send.
      security:
        - basicAuth: []
        - uploadToken: []
      parameters:
        - name: Email
          in: header
          description: |
            Email or name of the user, used together with the uploadToken security
          deprecated: true
          required: false
          schema:
            type: string
      requestBody:
        description: Userprofile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
        required: true
      responses:
        200:
          description: ok
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        401:
          description: authorization failed
          content: {}
        403:
          description: forbidden
          content: {}
        409:
          description: conflict with existing name or email
          content:
            text/plain:
              schema:
                type: string
      x-codegen-request-body-name: profile
  /photos/{country}/{filename}:
    get:
      summary: downloads the given photo
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          schema:
            type: string
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: {}
  /inbox/{filename}:
    get:
      summary: downloads the given photo from the inbox
      parameters:
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: {}
  /inbox/processed/{filename}:
    get:
      summary: downloads the given photo from the processed inbox
      parameters:
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: {}
components:
  securitySchemes:
    basicAuth:
      description: HTTP Basic Authentication
      type: http
      scheme: basic
    uploadToken:
      description: |
        DEPRECATED authentication via personal Upload-Token!
        Used together with Email header.
      type: apiKey
      in: header
      name: Upload-Token
  schemas:
    Station:
      description: A railway-station object with location and optional photo
      type: object
      properties:
        idStr:
          type: string
          description: Unique ID of the station per country
        id:
          type: integer
          description: Unique (numeric) ID of the station per country
          deprecated: true
          format: int64
        country:
          type: string
          description: Two character country code
        title:
          type: string
          description: Name of the station
        photographer:
          type: string
          description: Nickname of the photographer
        photographerUrl:
          type: string
          description: Link to the photographer
        photoUrl:
          type: string
          description: URL of the photo
        photoId:
          type: integer
          description: ID of the photo
          format: int64
        license:
          type: string
          description: |
            License of the photo, clients need to link to an online version
            of the license text
        licenseUrl:
          type: string
          description: |
            The URL of the license text. Clients should use this to link
            to the online version of the license text
        lat:
          type: number
          description: Latitude of the station
          format: double
        lon:
          type: number
          description: Longitute of the station
          format: double
        createdAt:
          type: integer
          description: |
            Timestamp when the photo was created in the railway-stations
            database (Milliseconds since 1.1.1970)
          format: int64
        DS100:
          type: string
          description: A short code of the station, depending on the country
        active:
          type: boolean
        outdated:
          type: boolean
      required:
        - idStr
        - country
        - title
        - lat
        - lon
        - active
    Photographers:
      description: |
        JSON Object with photographers nickname as parameter and number
        of photos as their value
      type: object
    Statistic:
      description: Statistic of number of stations with and without photos
      type: object
      properties:
        total:
          type: integer
          format: int64
        withPhoto:
          type: integer
          format: int64
        withoutPhoto:
          type: integer
          format: int64
        photographers:
          type: integer
          format: int64
        countryCode:
          type: string
          nullable: true
      required:
        - total
        - withPhoto
        - withoutPhoto
        - photographers
    Country:
      description: Supported Country with its configuration
      type: object
      properties:
        code:
          type: string
          description: Two letter country code
        name:
          type: string
          description: Name of the country
        email:
          type: string
          description: Email Address to send photos to
        twitterTags:
          type: string
          description: Twitter Tags when sharing the photo on Twitter
        timetableUrlTemplate:
          type: string
          description: |
            URL template for the timetable, contains {title}, {id} and
            {DS100} placeholders which need to be replaced
        overrideLicense:
          type: string
          description: if a country needs a special license
        active:
          type: boolean
          description: Is this an active country where we collect photos?
        providerApps:
          type: array
          description: array with links to provider apps
          items:
            $ref: '#/components/schemas/ProviderApp'
      required:
        - code
        - name
        - active
    ProviderApp:
      description: Provider App information
      type: object
      properties:
        type:
          type: string
          enum:
            - android
            - ios
            - web
        name:
          type: string
        url:
          type: string
      required:
        - type
        - name
        - url
    License:
      description: the only accepted type is "CC0 1.0 Universell (CC0 1.0)", the others are listed for backward compatibility
      type: string
      enum:
        - CC0
        - CC0 1.0 Universell (CC0 1.0)
        - CC4
        - CC BY-SA 4.0
    UpdateProfile:
      description: User profile information
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
          format: email
        license:
          $ref: '#/components/schemas/License'
        photoOwner:
          type: boolean
        link:
          type: string
        anonymous:
          type: boolean
        sendNotifications:
          type: boolean
      required:
        - nickname
        - email
        - license
        - photoOwner
    RegisterProfile:
      description: User profile information
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
          format: email
        license:
          $ref: '#/components/schemas/License'
        photoOwner:
          type: boolean
        link:
          type: string
        anonymous:
          type: boolean
        sendNotifications:
          type: boolean
        newPassword:
          type: string
      required:
        - nickname
        - email
        - license
        - photoOwner
    Profile:
      description: User profile information
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
          format: email
        license:
          $ref: '#/components/schemas/License'
        photoOwner:
          type: boolean
        link:
          type: string
        anonymous:
          type: boolean
        admin:
          type: boolean
        newPassword:
          type: string
        emailVerified:
          type: boolean
        sendNotifications:
          type: boolean
      required:
        - nickname
        - license
        - photoOwner
    InboxResponse:
      description: Response status of photo uploads and problem reports
      type: object
      required:
        - state
      properties:
        state:
          type: string
          enum:
            - REVIEW
            - LAT_LON_OUT_OF_RANGE
            - NOT_ENOUGH_DATA
            - UNSUPPORTED_CONTENT_TYPE
            - PHOTO_TOO_LARGE
            - CONFLICT
            - UNAUTHORIZED
            - ERROR
        message:
          type: string
        id:
          type: integer
          format: int64
        filename:
          type: string
          description: filename in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        crc32:
          description: CRC32 checksum of the uploaded photo
          type: integer
          format: int64
    InboxStateQueryRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
      required:
        - id
    InboxStateQueryResponse:
      description: Inbox state query
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
        stationId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        rejectedReason:
          type: string
        filename:
          type: string
          description: filename in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        crc32:
          description: CRC32 checksum of the uploaded photo
          type: integer
          format: int64
        state:
          type: string
          enum:
            - UNKNOWN
            - REVIEW
            - CONFLICT
            - ACCEPTED
            - REJECTED
      required:
        - id
        - state
    PublicInboxEntry:
      description: Represents an uploaded photo under review
      type: object
      properties:
        countryCode:
          type: string
        stationId:
          type: string
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      required:
        - countryCode
        - stationId
        - title
        - lat
        - lon
    InboxEntry:
      description: Represents an uploaded photo with processing state
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
        stationId:
          type: string
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        photographerNickname:
          type: string
        photographerEmail:
          type: string
        photoId:
          type: integer
          description: ID of the photo
          format: int64
        comment:
          type: string
        createdAt:
          type: integer
          format: int64
        done:
          type: boolean
          description: true if this photo was already imported or rejected
        filename:
          type: string
          description: name of the file in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        hasPhoto:
          type: boolean
          description: this station has already a photo (conflict)
        hasConflict:
          type: boolean
          description: conflict with another upload or existing photo
        problemReportType:
          type: string
          enum:
            - WRONG_LOCATION
            - STATION_INACTIVE
            - STATION_ACTIVE
            - STATION_NONEXISTENT
            - WRONG_NAME
            - WRONG_PHOTO
            - PHOTO_OUTDATED
            - OTHER
        isProcessed:
          type: boolean
          description: was this image process (e.g. pixelated)
        active:
          type: boolean
          description: active flag provided by the user
      required:
        - id
        - photographerNickname
        - comment
        - createdAt
        - done
        - hasPhoto
    InboxCommand:
      description: command to import or reject an inbox entry
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
          description: country of a new station
        stationId:
          type: string
          description: ID of a new station
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        rejectReason:
          type: string
          description: explanation of a rejection
        DS100:
          type: string
          description: DS100 attribute of a new station
        active:
          type: boolean
          description: active flag of a new station (default true)
        conflictResolution:
          type: string
          description: how to handle conflicts
          enum:
            - DO_NOTHING
            - OVERWRITE_EXISTING_PHOTO
            - IMPORT_AS_NEW_PRIMARY_PHOTO
            - IMPORT_AS_NEW_SECONDARY_PHOTO
            - IGNORE_NEARBY_STATION
        command:
          type: string
          enum:
            - IMPORT_PHOTO
            - IMPORT_MISSING_STATION
            - ACTIVATE_STATION
            - DEACTIVATE_STATION
            - DELETE_STATION
            - DELETE_PHOTO
            - MARK_SOLVED
            - REJECT
            - CHANGE_NAME
            - UPDATE_LOCATION
            - PHOTO_OUTDATED
      required:
        - id
        - command
    InboxCountResponse:
      description: counts the pending inbox entries
      type: object
      properties:
        pendingInboxEntries:
          type: integer
          format: int64
      required:
        - pendingInboxEntries
    AdminInboxCommandResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
      required:
        - status
        - message
    NextZResponse:
      type: object
      properties:
        nextZ:
          type: string
      required:
        - nextZ
    ProblemReport:
      description: Represents a report of a problem with a station
      type: object
      properties:
        countryCode:
          type: string
        stationId:
          type: string
        photoId:
          type: integer
          description: ID of the photo
          format: int64
        comment:
          type: string
        type:
          type: string
          enum:
            - WRONG_LOCATION
            - STATION_ACTIVE
            - STATION_INACTIVE
            - STATION_NONEXISTENT
            - WRONG_PHOTO
            - PHOTO_OUTDATED
            - OTHER
            - WRONG_NAME
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      required:
        - countryCode
        - stationId
        - comment
        - type
    ChangePassword:
      type: object
      properties:
        newPassword:
          type: string
      required:
        - newPassword
    GeneralErrorMessage:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
      required:
        - status
        - message
