---
openapi: 3.0.1
info:
  title: RSAPI
  description: 'Backend Service for https://www.railway-stations.org/. Sourcecode
    available at: https://github.com/RailwayStations/RSAPI.'
  license:
    name: MIT
    url: https://github.com/RailwayStations/RSAPI/blob/master/LICENSE.txt
  version: "20220416.1130"
servers:
- url: https://api.railway-stations.org/
tags:
- name: bahnhofsfotos
  description: Photos of railway stations
  externalDocs:
    description: Find out more
    url: https://www.railway-stations.org
paths:
  /:
    get:
      summary: Root resource with link to documentation
      responses:
        200:
          description: successful operation
          content: {}
  /{country}/stations:
    get:
      summary: Finds railway stations by various query criteria
      parameters:
      - name: country
        in: path
        description: filter by country code
        required: true
        schema:
          type: string
      - name: hasPhoto
        in: query
        description: filter by photo availalbe/missing
        schema:
          type: boolean
      - name: photographer
        in: query
        description: filter by nickname of a photographer
        schema:
          type: string
      - name: maxDistance
        in: query
        description: filter by max distance from the coordinates given by lat and
          lon
        schema:
          type: integer
          format: int64
      - name: lat
        in: query
        description: latitute of the coordinates to filter by max distance
        schema:
          type: number
          format: double
      - name: lon
        in: query
        description: longitude of the coordinates to filter by max distance
        schema:
          type: number
          format: double
      - name: active
        in: query
        description: filter on active/inactive stations
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/gpx+xml:
              schema:
                type: string
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
            text/plain:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /{country}/stations.gpx:
    get:
      summary: Finds railway stations by various query criteria as GPX
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
        - name: hasPhoto
          in: query
          description: filter by photo availalbe/missing
          schema:
            type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          schema:
            type: string
        - name: maxDistance
          in: query
          description: filter by max distance from the coordinates given by lat and
            lon
          schema:
            type: integer
            format: int64
        - name: lat
          in: query
          description: latitute of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: lon
          in: query
          description: longitude of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: active
          in: query
          description: filter on active/inactive stations
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/gpx+xml:
              schema:
                type: string
        404:
          description: Country not found
          content: {}
  /stations:
    get:
      summary: Finds railway stations by various query criteria
      parameters:
      - name: country
        in: query
        description: filter by country code
        schema:
          type: array
          items:
            type: string
      - name: hasPhoto
        in: query
        description: filter by photo availalbe/missing
        schema:
          type: boolean
      - name: photographer
        in: query
        description: filter by nickname of a photographer
        schema:
          type: string
      - name: maxDistance
        in: query
        description: filter by max distance from the coordinates given by lat and
          lon
        schema:
          type: integer
          format: int64
      - name: lat
        in: query
        description: latitute of the coordinates to filter by max distance
        schema:
          type: number
          format: double
      - name: lon
        in: query
        description: longitude of the coordinates to filter by max distance
        schema:
          type: number
          format: double
      - name: active
        in: query
        description: filter on active/inactive stations
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/gpx+xml:
              schema:
                type: string
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
            text/plain:
              schema:
                type: string
  /stations.gpx:
    get:
      summary: Finds railway stations by various query criteria
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: array
            items:
              type: string
        - name: hasPhoto
          in: query
          description: filter by photo availalbe/missing
          schema:
            type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          schema:
            type: string
        - name: maxDistance
          in: query
          description: filter by max distance from the coordinates given by lat and
            lon
          schema:
            type: integer
            format: int64
        - name: lat
          in: query
          description: latitute of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: lon
          in: query
          description: longitude of the coordinates to filter by max distance
          schema:
            type: number
            format: double
        - name: active
          in: query
          description: filter on active/inactive stations
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/gpx+xml:
              schema:
                type: string
  /{country}/stations/{id}:
    get:
      summary: Find a railway station by its ID
      parameters:
      - name: country
        in: path
        description: country code
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id of the station
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
        404:
          description: Station not found
          content: {}
  /recentPhotoImports:
    get:
      summary: List stations with photo uploads in the las 24h
      parameters:
      - name: sinceHours
        in: query
        description: defines the timeframe since when to look for recent photo uploads,
          default is 10h
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
  /{country}/photographers:
    get:
      summary: List of all photographers of a given country with their number of photos
        taken
      parameters:
      - name: country
        in: path
        description: filter by country code
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Photographers'
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content: {}
        404:
          description: Country not found
          content: {}
  /{country}/photographers.txt:
    get:
      summary: List of all photographers of a given country with their number of photos
        taken
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content: {}
        404:
          description: Country not found
          content: {}
  /{country}/photographers.json:
    get:
      summary: List of all photographers of a given country with their number of photos
        taken
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content: {}
        404:
          description: Country not found
          content: {}
  /photographers:
    get:
      summary: List of all photographers with their number of photos taken
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Photographers'
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content: {}
  /photographers.json:
    get:
      summary: List of all photographers with their number of photos taken
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content: {}
  /photographers.txt:
    get:
      summary: List of all photographers with their number of photos taken
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content: {}
  /{country}/stats:
    get:
      summary: Statistic of photos with and without photos by country
      parameters:
      - name: country
        in: path
        description: filter by country code
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Statistic'
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        400:
          description: Bad Request
          content: {}
        404:
          description: Country not found
          content: {}
  /{country}/stats.json:
    get:
      summary: Statistic of photos with and without photos by country
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        400:
          description: Bad Request
          content: {}
        404:
          description: Country not found
          content: {}
  /{country}/stats.txt:
    get:
      summary: Statistic of photos with and without photos by country
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Statistic'
        400:
          description: Bad Request
          content: {}
        404:
          description: Country not found
          content: {}
  /stats:
    get:
      summary: Overall statistic of photos with and without photos
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Statistic'
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        404:
          description: Country not found
          content: {}
  /stats.json:
    get:
      summary: Overall statistic of photos with and without photos
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        404:
          description: Country not found
          content: {}
  /stats.txt:
    get:
      summary: Overall statistic of photos with and without photos
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Statistic'
        404:
          description: Country not found
          content: {}
  /countries:
    get:
      summary: List of all supported countries with their configuration
      parameters:
        - name: onlyActive
          in: query
          description: return only active countries? Defaults to true.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
  /countries.json:
    get:
      summary: List of all supported countries with their configuration
      parameters:
      - name: onlyActive
        in: query
        description: return only active countries? Defaults to true.
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
  /photoUpload:
    post:
      summary: Upload a new Photo
      parameters:
      - name: Authorization
        in: header
        description: basic authorization
        required: false
        schema:
          type: string
      - name: Upload-Token
        in: header
        description: DEPRECATED, use basic authorization! Upload Token
        required: false
        schema:
          type: string
      - name: Email
        in: header
        description: DEPRECATED, use basic authorization! Email or name of the user
        required: false
        schema:
          type: string
      - name: Country
        in: header
        description: country code
        schema:
          type: string
      - name: Station-Id
        in: header
        description: id of the railwaystation
        schema:
          type: string
      - name: Content-Type
        in: header
        description: mime type of the image, "image/png" or "image/jpeg"
        required: true
        schema:
          type: string
      - name: Station-Title
        in: header
        description: name of the station, for upload of missing stations (needs to
          be URL-encoded with UTF-8 charset)
        schema:
          type: string
      - name: Latitude
        in: header
        description: latitude, for upload of missing stations
        schema:
          type: number
          format: double
      - name: Longitude
        in: header
        description: longitude, for upload of missing stations
        schema:
          type: number
          format: double
      - name: Comment
        in: header
        description: comment of the photographer to the reviewer (needs to be URL-encoded
          with UTF-8 charset)
        schema:
          type: string
      - name: Active
        in: header
        description: is this station active?
        schema:
          type: boolean
      requestBody:
        description: image
        content:
          image/jpeg:
            schema:
              type: string
              format: byte
          image/png:
            schema:
              type: string
              format: byte
        required: true
      responses:
        202:
          description: upload successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        400:
          description: wrong request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        401:
          description: authorization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        403:
          description: forbidden
          content: {}
        409:
          description: photo already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        413:
          description: image too large (maximum 20 MB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
      x-codegen-request-body-name: image
  /reportProblem:
    post:
      summary: Report a for a Railway-Station
      parameters:
      - name: Authorization
        in: header
        description: basic authorization
        schema:
          type: string
      requestBody:
        description: The problem report
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ProblemReport'
        required: true
      responses:
        202:
          description: report successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        400:
          description: wrong request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        401:
          description: authorization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        403:
          description: forbidden
          content: {}
      x-codegen-request-body-name: problemReport
  /userInbox:
    post:
      summary: Query the state of photo uploads of the authorized user
      parameters:
      - name: Authorization
        in: header
        description: basic authorization
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InboxStateQuery'
        required: true
      responses:
        200:
          description: array UploadStateQuery objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboxStateQuery'
      x-codegen-request-body-name: UploadStateQueries
  /publicInbox:
    get:
      summary: Get the current public inbox, stations where photos have been uploaded
      responses:
        200:
          description: array of public inbox objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicInboxEntry'
  /adminInboxCount:
    get:
      summary: Count pending inbox items
      responses:
        200:
          description: count of pending inbox items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxCountResponse'
  /adminInbox:
    get:
      summary: Get the current inbox, photos and problem reports under review.
      parameters:
      - name: Authorization
        in: header
        description: basic authorization
        schema:
          type: string
      responses:
        200:
          description: array of inbox objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboxEntry'
        401:
          description: not authorized
          content: {}
        403:
          description: forbidden
          content: {}
    post:
      summary: Import or reject an uploaded photo or a problem report from the inbox
      parameters:
      - name: Authorization
        in: header
        description: basic authorization
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxCommand'
        required: true
      responses:
        200:
          description: command successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInboxCommandResponse'
        400:
          description: bad request, something wrong with the data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInboxCommandResponse'
        401:
          description: not authorized
          content: {}
        403:
          description: forbidden
          content: {}
      x-codegen-request-body-name: UploadCommand
  /registration:
    post:
      summary: Register for an account
      requestBody:
        description: Registration information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        202:
          description: registration accepted
          content: {}
        400:
          description: wrong request
          content: {}
        409:
          description: conflict with existing name or email
          content: {}
        422:
          description: unprocessable entity, Registration input document error
          content: {}
      x-codegen-request-body-name: registration
  /emailVerification/{token}:
    get:
      summary: Verify eMail-Address with verification token
      parameters:
      - name: token
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: email successfully verified
          content: {}
        404:
          description: token not found, verification failed
          content: {}
  /resendEmailVerification:
    post:
      summary: Sends a new eMail-Verification mail
      parameters:
      - name: Authorization
        in: header
        description: basic authorization with old password
        schema:
          type: string
      responses:
        200:
          description: email successfully sent
          content: {}
  /resetPassword:
    post:
      summary: Requests a new password only
      parameters:
      - name: NameOrEmail
        in: header
        description: name or email of the user
        required: true
        schema:
          type: string
      responses:
        202:
          description: request accepted, email with new password will be sent
          content: {}
        400:
          description: bad request, probably due to email not set
          content: {}
        404:
          description: User not found
          content: {}
  /newUploadToken:
    post:
      summary: Requests a new Upload-Token (now password) only
      description: DEPRECATED, use reset password
      parameters:
      - name: Email
        in: header
        description: email or name of the user
        required: true
        schema:
          type: string
      responses:
        202:
          description: request accepted, email with new password (uploadToken) will
            be sent
          content: {}
        400:
          description: bad request, probably due to email not set
          content: {}
        404:
          description: User not found
          content: {}
  /changePassword:
    post:
      summary: Change user password
      parameters:
      - name: Authorization
        in: header
        description: basic authorization with old password
        schema:
          type: string
      - name: New-Password
        in: header
        description: new password, deprecated use body message for proper encoding
        required: false
        schema:
          type: string
      requestBody:
        description: ChangePassword
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: false
      responses:
        200:
          description: password changed
          content: {}
        400:
          description: bad request, e.g. empty password, too short (< 8 chars)
          content: {}
        404:
          description: User not found
          content: {}
  /myProfile:
    get:
      summary: Get the users profile
      parameters:
      - name: Authorization
        in: header
        description: basic authorization
        schema:
          type: string
        required: false
      - name: Upload-Token
        in: header
        description: DEPRECATED, use basic authorization! Upload Token
        required: false
        schema:
          type: string
      - name: Email
        in: header
        description: DEPRECATED, use basic authorization! Email or name of the user
        required: false
        schema:
          type: string
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        401:
          description: authorization failed
          content: {}
        403:
          description: forbidden
          content: {}
    post:
      summary: Update the users profile. In case the email has been changed, only
        the email is saved and a new password / Upload-Token is send.
      parameters:
      - name: Authorization
        in: header
        description: basic authorization
        required: false
        schema:
          type: string
      - name: Upload-Token
        in: header
        description: DEPRECATED, use basic authorization! Upload Token
        required: false
        schema:
          type: string
      - name: Email
        in: header
        description: DEPRECATED, use basic authorization! Email or name of the user
        required: false
        schema:
          type: string
      requestBody:
        description: Userprofile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        200:
          description: ok
          content: {}
        400:
          description: wrong request
          content: {}
        401:
          description: authorization failed
          content: {}
        403:
          description: forbidden
          content: {}
        409:
          description: conflict with existing name or email
          content: {}
      x-codegen-request-body-name: profile
  /fotos/{country}/{filename}:
    get:
      summary: downloads the given photo
      parameters:
      - name: country
        in: path
        description: country code
        required: true
        schema:
          type: string
      - name: filename
        in: path
        description: filename of the photo
        required: true
        schema:
          type: string
      - name: width
        in: query
        description: scale the image to the given width
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: ok
          content: {}
        404:
          description: file not found
          content: {}
  /photos/{country}/{filename}:
    get:
      summary: downloads the given photo
      parameters:
      - name: country
        in: path
        description: country code
        required: true
        schema:
          type: string
      - name: filename
        in: path
        description: filename of the photo
        required: true
        schema:
          type: string
      - name: width
        in: query
        description: scale the image to the given width
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: ok
          content: {}
        404:
          description: file not found
          content: {}
  /inbox/{filename}:
    get:
      summary: downloads the given photo from the inbox
      parameters:
      - name: filename
        in: path
        description: filename of the photo
        required: true
        schema:
          type: string
      - name: width
        in: query
        description: scale the image to the given width
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: ok
          content: {}
        404:
          description: file not found
          content: {}
  /inbox/processed/{filename}:
    get:
      summary: downloads the given photo from the processed inbox
      parameters:
      - name: filename
        in: path
        description: filename of the photo
        required: true
        schema:
          type: string
      - name: width
        in: query
        description: scale the image to the given width
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: ok
          content: {}
        404:
          description: file not found
          content: {}
components:
  schemas:
    Station:
      type: object
      properties:
        idStr:
          type: string
          description: Unique ID of the station per country
        id:
          type: integer
          description: DEPRECATED! Unique (numeric) ID of the station per country
          format: int64
        country:
          type: string
          description: Two character country code
        title:
          type: string
          description: Name of the station
        photographer:
          type: string
          description: Nickname of the photographer
        photographerUrl:
          type: string
          description: Link to the photographer
        photoUrl:
          type: string
          description: URL of the photo
        license:
          type: string
          description: License of the photo, clients need to link to an online version
            of the license text
        licenseUrl:
          type: string
          description: The URL of the license text. Clients should use this to link
            to the online version of the license text
        lat:
          type: number
          description: Latitude of the station
          format: double
        lon:
          type: number
          description: Longitute of the station
          format: double
        createdAt:
          type: integer
          description: Timestamp when the photo was created in the railway-stations
            database (Milliseconds since 1.1.1970)
          format: int64
        DS100:
          type: string
          description: A short code of the station, depending on the country
        active:
          type: boolean
        outdated:
          type: boolean
    Photographers:
      type: object
      description: JSON Object with photographers nickname as parameter and number
        of photos as their value
    Statistic:
      type: object
      properties:
        total:
          type: integer
          format: int64
        withPhoto:
          type: integer
          format: int64
        withoutPhoto:
          type: integer
          format: int64
        photographers:
          type: integer
          format: int64
        countryCode:
          type: string
          nullable: true
      description: Statistic of number of stations with and without photos
    Country:
      type: object
      properties:
        code:
          type: string
          description: Two letter country code
        name:
          type: string
          description: Name of the country
        email:
          type: string
          description: Email Address to send photos to
        twitterTags:
          type: string
          description: Twitter Tags when sharing the photo on Twitter
        timetableUrlTemplate:
          type: string
          description: URL template for the timetable, contains {title}, {id} and
            {DS100} placeholders which need to be replaced
        overrideLicense:
          type: string
          description: if a country needs a special license
        active:
          type: boolean
          description: Is this an active country where we collect photos?
        providerApps:
          type: array
          description: array with links to provider apps
          items:
            $ref: '#/components/schemas/ProviderApp'
      description: Supported Country with its configuration
    ProviderApp:
      type: object
      properties:
        type:
          type: string
          enum:
          - android
          - ios
          - web
        name:
          type: string
        url:
          type: string
      description: Provider App information
    Profile:
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
          format: email
        license:
          type: string
          enum:
          - CC0
          - CC0 1.0 Universell (CC0 1.0)
          - CC4
          - CC BY-SA 4.0
        photoOwner:
          type: boolean
        link:
          type: string
        anonymous:
          type: boolean
        admin:
          type: boolean
        newPassword:
          type: string
        emailVerified:
          type: boolean
        sendNotifications:
          type: boolean
      description: User profile information
      required:
        - nickname
        - license
        - photoOwner
    InboxResponse:
      type: object
      properties:
        state:
          type: string
          enum:
          - REVIEW
          - LAT_LON_OUT_OF_RANGE
          - NOT_ENOUGH_DATA
          - UNSUPPORTED_CONTENT_TYPE
          - PHOTO_TOO_LARGE
          - CONFLICT
          - UNAUTHORIZED
          - ERROR
        message:
          type: string
        id:
          type: integer
          format: int64
        filename:
          type: string
          description: filename in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        crc32:
          description: CRC32 checksum of the uploaded photo
          type: integer
          format: int64
      description: Response status of photo uploads and problem reports
    InboxStateQuery:
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
        stationId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        rejectedReason:
          type: string
        filename:
          type: string
          description: filename in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        crc32:
          description: CRC32 checksum of the uploaded photo
          type: integer
          format: int64
        state:
          type: string
          enum:
          - UNKNOWN
          - REVIEW
          - CONFLICT
          - ACCEPTED
          - REJECTED
      description: Upload state query
    PublicInboxEntry:
      type: object
      properties:
        countryCode:
          type: string
        stationId:
          type: string
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      description: Represents an uploaded photo under review
    InboxEntry:
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
        stationId:
          type: string
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        photographerNickname:
          type: string
        photographerEmail:
          type: string
        comment:
          type: string
        createdAt:
          type: integer
          format: int64
        done:
          type: boolean
          description: true if this photo was already imported or rejected
        filename:
          type: string
          description: name of the file in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        hasPhoto:
          type: boolean
          description: this station has already a photo (conflict)
        hasConflict:
          type: boolean
          description: conflict with another upload or existing photo
        problemReportType:
          type: string
          enum:
          - WRONG_LOCATION
          - STATION_INACTIVE
          - STATION_NONEXISTENT
          - WRONG_PHOTO
          - PHOTO_OUTDATED
          - OTHER
        isProcessed:
          type: boolean
          description: was this image process (e.g. pixelated)
        active:
          type: boolean
          description: active flag provided by the user
      description: Represents an uploaded photo with processing state
    InboxCommand:
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
          description: country of a new station
        stationId:
          type: string
          description: ID of a new station
        rejectReason:
          type: string
          description: explanation of a rejection
        DS100:
          type: string
          description: DS100 attribute of a new station
        active:
          type: boolean
          description: active flag of a new station (default true)
        ignoreConflict:
          type: boolean
          description: ignore a conflict
        createStation:
          type: boolean
          description: create the station if it doesn't exist
        command:
          type: string
          enum:
          - IMPORT
          - ACTIVATE_STATION
          - DEACTIVATE_STATION
          - DELETE_STATION
          - DELETE_PHOTO
          - MARK_SOLVED
          - REJECT
          - CHANGE_NAME
          - UPDATE_LOCATION
          - PHOTO_OUTDATED
      description: command to import or reject an inbox entry
    InboxCountResponse:
      type: object
      properties:
        pendingInboxEntries:
          type: integer
          format: int64
      description: counts the pending inbox entries
    AdminInboxCommandResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
    ProblemReport:
      type: object
      properties:
        countryCode:
          type: string
        stationId:
          type: string
        comment:
          type: string
        type:
          type: string
          enum:
          - WRONG_LOCATION
          - STATION_ACTIVE
          - STATION_INACTIVE
          - STATION_NONEXISTENT
          - WRONG_PHOTO
          - PHOTO_OUTDATED
          - OTHER
          - WRONG_NAME
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      description: Represents a report of a problem with a station
    ChangePassword:
      type: object
      properties:
        newPassword:
          type: string
