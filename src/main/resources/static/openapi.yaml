---
openapi: 3.0.1
info:
  title: RSAPI
  description: |
    Backend Service for https://www.railway-stations.org/. 
    Sourcecode available at: https://github.com/RailwayStations/RSAPI.
  license:
    name: MIT
    url: https://github.com/RailwayStations/RSAPI/blob/master/LICENSE.txt
  version: "20231222.1300"
servers:
  - url: https://api.railway-stations.org/
tags:
  - name: bahnhofsfotos
    description: Photos of railway stations
    externalDocs:
      description: Find out more
      url: https://www.railway-stations.org

paths:
  /oauth2/authorize:
    get:
      summary: OAuth2 authorization endpoint
      description: |
        Redirect the user to this URL to start the authorization code flow.
        Specification: https://datatracker.ietf.org/doc/html/rfc6749#section-3.1
        PKCE: https://tools.ietf.org/html/rfc7636
      tags:
        - oauth
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: scope
          in: query
          required: true
          schema:
            type: string
            enum:
              - all
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - code
              - token
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
        - name: state
          in: query
          schema:
            type: string
        - name: code_challenge
          description: BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
          in: query
          schema:
            type: string
        - name: code_challenge_method
          in: query
          schema:
            type: string
            enum:
              - S256
      responses:
        302:
          description: redirect to `redirect_uri` with `code` and `state` query parameter
  /oauth2/token:
    post:
      summary: OAuth2 token endpoint
      description: https://datatracker.ietf.org/doc/html/rfc6749#section-3.2
      tags:
        - oauth
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthTokenRequest'
      responses:
        200:
          description: successfull token request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'
  /oauth2/revoke:
    post:
      summary: OAuth2 revoke token endpoint
      description: https://datatracker.ietf.org/doc/html/rfc7009#section-2.1
      tags:
        - oauth
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OAuthRevokeTokenRequest'
      responses:
        200:
          description: successfully revoked the token

  /photoStationById/{country}/{id}:
    get:
      summary: Get a railway station of a country by its id with all its photos
      tags:
        - photoStations
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          schema:
            $ref: '#/components/schemas/CountryCode'
        - name: id
          in: path
          description: id of the station
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoStations'
        404:
          description: Station not found
          content: { }

  /photoStationsByCountry/{country}:
    get:
      summary: List stations by country
      description: |
        Returns only the primary photo of each station.
        Stations can optionally be filtered by 'hasPhoto' and/or 'isActive' flag.
      tags:
        - photoStations
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          schema:
            $ref: '#/components/schemas/CountryCode'
        - name: hasPhoto
          in: query
          description: filter by photo available/missing
          schema:
            type: boolean
        - name: isActive
          in: query
          description: filter on active/inactive stations
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoStations'

  /photoStationsByPhotographer/{photographer}:
    get:
      summary: List stations with photos by the given photographer
      description: |
        Returns only the photos of a station which belong to the photographer.
        Can return several photos per station, not necessarily the primary photo.
      tags:
        - photoStations
      parameters:
        - name: photographer
          in: path
          description: photographer name
          required: true
          schema:
            type: string
        - name: country
          in: query
          description: country code
          schema:
            $ref: '#/components/schemas/CountryCode'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoStations'

  /photoStationsByRecentPhotoImports:
    get:
      summary: List stations with photos uploaded in the last 24h
      description: |
        Returns only the recently imported photos of a station, defined by the sinceHours parameter.
        Can return several photos per station, not necessarily the primary photo.
      tags:
        - photoStations
      parameters:
        - name: sinceHours
          in: query
          description: |
            defines the timeframe since when to look for recent photo uploads,
            default is 10h
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
            maximum: 800
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoStations'

  /{country}/stations:
    get:
      summary: Finds railway stations by various query criteria
      deprecated: true
      tags:
        - stations
      parameters:
        - name: country
          in: path
          description: filter by country code
          required: true
          schema:
            $ref: '#/components/schemas/CountryCode'
        - name: hasPhoto
          in: query
          description: filter by photo availalbe/missing
          schema:
            type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          schema:
            type: string
        - name: active
          in: query
          description: filter on active/inactive stations
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
        404:
          description: Country not found
          content: { }

  /stations:
    get:
      summary: Finds railway stations by various query criteria
      deprecated: true
      tags:
        - stations
      parameters:
        - name: country
          in: query
          description: filter by country code, defaults to "de" if missing, limits to max three countries
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CountryCode'
        - name: hasPhoto
          in: query
          description: filter by photo available/missing
          schema:
            type: boolean
        - name: photographer
          in: query
          description: filter by nickname of a photographer
          schema:
            type: string
        - name: active
          in: query
          description: filter on active/inactive stations
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'

  /{country}/stations/{id}:
    get:
      summary: Find a railway station by its ID
      deprecated: true
      tags:
        - stations
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          schema:
            $ref: '#/components/schemas/CountryCode'
        - name: id
          in: path
          description: id of the station
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
        404:
          description: Station not found
          content: { }

  /photographers:
    get:
      summary: List of all photographers with their number of photos taken
      tags:
        - photographers
      parameters:
        - name: country
          in: query
          description: filter by country code
          required: false
          schema:
            $ref: '#/components/schemas/CountryCode'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photographers'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object

  /stats:
    get:
      summary: Overall statistic of photos with and without photos
      tags:
        - statistic
      parameters:
        - name: country
          in: query
          description: filter by country code
          schema:
            $ref: '#/components/schemas/CountryCode'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistic'
        404:
          description: Country not found
          content: { }

  /countries:
    get:
      summary: List of all supported countries with their configuration
      tags:
        - countries
      parameters:
        - name: onlyActive
          in: query
          description: return only active countries? Defaults to true.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'

  /countries.json:
    get:
      summary: List of all supported countries with their configuration
      deprecated: true
      tags:
        - countries
      parameters:
        - name: onlyActive
          in: query
          description: return only active countries? Defaults to true.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'

  /photoUpload:
    post:
      summary: Upload a new Photo
      tags:
        - photoUpload
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Upload-Token'
        - $ref: '#/components/parameters/Email'
        - name: Country
          in: header
          description: country code
          schema:
            $ref: '#/components/schemas/CountryCode'
        - name: Station-Id
          in: header
          description: id of the railwaystation
          schema:
            type: string
        - name: Content-Type
          in: header
          description: mime type of the image, "image/png" or "image/jpeg"
          required: true
          schema:
            type: string
        - name: Station-Title
          in: header
          description: name of the station, for upload of missing stations (needs to
            be URL-encoded with UTF-8 charset)
          schema:
            type: string
        - name: Latitude
          in: header
          description: latitude, for upload of missing stations
          schema:
            type: number
            format: double
        - name: Longitude
          in: header
          description: longitude, for upload of missing stations
          schema:
            type: number
            format: double
        - name: Comment
          in: header
          description: comment of the photographer to the reviewer (needs to be URL-encoded
            with UTF-8 charset)
          schema:
            type: string
        - name: Active
          in: header
          description: is this station active?
          schema:
            type: boolean
      requestBody:
        description: image, required for existing station, optional for missing stations
        content:
          image/jpeg:
            schema:
              type: string
              format: byte
          image/png:
            schema:
              type: string
              format: byte
          application/octet-stream:
            schema:
              type: string
              format: byte
      responses:
        202:
          description: upload successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        401:
          description: authorization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        403:
          description: forbidden
          content: { }
        409:
          description: photo already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        413:
          description: image too large (maximum 20 MB)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
      x-codegen-request-body-name: image

  /reportProblem:
    post:
      summary: Report a for a Railway-Station
      tags:
        - inbox
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        description: The problem report
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ProblemReport'
        required: true
      responses:
        202:
          description: report successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        401:
          description: authorization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxResponse'
        403:
          description: forbidden
          content: { }
      x-codegen-request-body-name: problemReport

  /userInbox:
    get:
      summary: Query all uploads of the authorized user
      tags:
        - inbox
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        200:
          description: array of InboxStateQueryResponse objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboxStateQueryResponse'
    post:
      summary: Query the state of photo uploads of the authorized user
      tags:
        - inbox
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InboxStateQueryRequest'
        required: true
      responses:
        200:
          description: array of InboxStateQueryResponse objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboxStateQueryResponse'
      x-codegen-request-body-name: UploadStateQueries

  /publicInbox:
    get:
      summary: Get the current public inbox, stations where photos have been uploaded
      tags:
        - inbox
      responses:
        200:
          description: array of public inbox objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicInboxEntry'

  /adminInboxCount:
    get:
      summary: Count pending inbox items
      tags:
        - inbox
      responses:
        200:
          description: count of pending inbox items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxCountResponse'

  /nextZ:
    get:
      summary: Get next Z-StationId for missing stations
      tags:
        - inbox
      responses:
        200:
          description: next Z-StationId value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NextZResponse'

  /adminInbox:
    get:
      summary: Get the current inbox, photos and problem reports under review.
      tags:
        - inbox
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        200:
          description: array of inbox objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InboxEntry'
        401:
          description: not authorized
          content: { }
        403:
          description: forbidden
          content: { }
    post:
      summary: |
        Import or reject an uploaded photo or a problem report from the inbox
      tags:
        - inbox
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxCommand'
        required: true
      responses:
        200:
          description: command successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInboxCommandResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInboxCommandResponse'
        401:
          description: not authorized
          content: { }
        403:
          description: forbidden
          content: { }
      x-codegen-request-body-name: UploadCommand

  /registration:
    post:
      summary: Register a new account
      description: |
        DEPRECATED: use oauth instead
      deprecated: true
      tags:
        - profile
      requestBody:
        description: Registration information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterProfile'
        required: true
      responses:
        202:
          description: registration accepted
          content: { }
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        409:
          description: conflict with existing name or email
          content:
            text/plain:
              schema:
                type: string
        422:
          description: unprocessable entity, Registration input document error
          content: { }
      x-codegen-request-body-name: registration

  /emailVerification/{token}:
    get:
      summary: Verify eMail-Address with verification token
      tags:
        - profile
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: email successfully verified
          content:
            text/plain:
              schema:
                type: string
        404:
          description: token not found, verification failed
          content: { }

  /resendEmailVerification:
    post:
      summary: Sends a new eMail-Verification mail
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/Authorization'
      responses:
        200:
          description: email successfully sent
          content: { }

  /changePassword:
    post:
      summary: Change user password
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        description: ChangePassword
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: false
      responses:
        200:
          description: password changed
          content: { }
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        404:
          description: User not found
          content: { }

  /myProfile:
    get:
      summary: Get the users profile
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Upload-Token'
        - $ref: '#/components/parameters/Email'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        401:
          description: authorization failed
          content: { }
        403:
          description: forbidden
          content: { }
    post:
      summary: Update the users profile.
      description: |
        In case the email has been changed, only the email is saved and a new password is send.
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Upload-Token'
        - $ref: '#/components/parameters/Email'
      requestBody:
        description: Userprofile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
        required: true
      responses:
        200:
          description: ok
          content: { }
        400:
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
        401:
          description: authorization failed
          content: { }
        403:
          description: forbidden
          content: { }
        409:
          description: conflict with existing name or email
          content:
            text/plain:
              schema:
                type: string
      x-codegen-request-body-name: profile
    delete:
      summary: Delete the users profile.
      description: |
        The delete request closes the account of the logged in user on railway-stations.org.
        The account will be changed to anonymous. 
        The email-address, nickname, link and credentials will be removed from the account.
        All OAuth tokens will be removed as well. No further login will be possible.
      tags:
        - profile
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/Upload-Token'
        - $ref: '#/components/parameters/Email'
      responses:
        204:
          description: delete action has been enacted, no further information
        401:
          description: authorization failed
          content: { }
        403:
          description: forbidden
          content: { }

  /photos/{country}/{filename}:
    get:
      summary: downloads the given photo
      tags:
        - photoDownload
      parameters:
        - name: country
          in: path
          description: country code
          required: true
          schema:
            $ref: '#/components/schemas/CountryCode'
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: { }

  /inbox/{filename}:
    get:
      summary: downloads the given photo from the inbox
      tags:
        - photoDownload
      parameters:
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: { }

  /inbox/processed/{filename}:
    get:
      summary: downloads the given photo from the processed inbox
      tags:
        - photoDownload
      parameters:
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: { }

  /inbox/done/{filename}:
    get:
      summary: downloads the given photo from the done inbox
      tags:
        - photoDownload
      parameters:
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: { }

  /inbox/rejected/{filename}:
    get:
      summary: downloads the given photo from the rejected inbox
      tags:
        - photoDownload
      parameters:
        - name: filename
          in: path
          description: filename of the photo
          required: true
          schema:
            type: string
        - name: width
          in: query
          description: scale the image to the given width
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: ok
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: file not found
          content: { }

components:
  parameters:
    Authorization:
      name: Authorization
      in: header
      description: |
        JWT authorization
      required: false
      schema:
        type: string
    Upload-Token:
      name: Upload-Token
      in: header
      description: |
        DEPRECATED authentication via personal Upload-Token!
        Used together with Email header.
      deprecated: true
      required: false
      schema:
        type: string
    Email:
      name: Email
      in: header
      description: |
        DEPRECATED, use basic authorization! 
        Email or name of the user, used together with the Upload-Token.
      deprecated: true
      required: false
      schema:
        type: string

  schemas:
    OAuthTokenRequest:
      description: OAuth2 token request
      type: object
      properties:
        grant_type:
          type: string
          enum:
            - authorization_code
            - refresh_token
        refresh_token:
          type: string
        code:
          type: string
        client_id:
          type: string
        redirect_uri:
          type: string
          format: uri
        code_verifier:
          type: string
      required:
        - grant_type
        - client_id
        - redirect_uri

    OAuthTokenResponse:
      description: OAuth2 token response
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        scope:
          type: string
        token_type:
          type: string
          enum:
            - Bearer
        expires_in:
          type: integer
          format: int64
      required:
        - access_token
        - scope
        - token_type
        - redirect

    OAuthRevokeTokenRequest:
      description: OAuth2 token revokation request
      type: object
      properties:
        token:
          type: string
        token_type_hint:
          type: string
          enum:
            - access_token
            - refresh_token
      required:
        - token

    PhotoStations:
      description: Stations with photos
      type: object
      properties:
        photoBaseUrl:
          type: string
          description: Base URL of all photos
          example: "https://api.railway-stations.org/photos/"
        licenses:
          type: array
          description: List of used licenses, might be empty if no photos available
          items:
            $ref: '#/components/schemas/PhotoLicense'
        photographers:
          type: array
          description: List of all photographers, might be empty if no photos available
          items:
            $ref: '#/components/schemas/Photographer'
        stations:
          type: array
          description: List of the stations
          items:
            $ref: '#/components/schemas/PhotoStation'
      required:
        - "photoBaseUrl"
        - "licenses"
        - "photographers"
        - "stations"

    PhotoLicense:
      description: License used by a photo
      type: object
      properties:
        id:
          type: string
          description: Unique id of the license
          example: "CC0"
        name:
          type: string
          description: Name of the license to display at the photo
          example: "CC0 1.0 Universell (CC0 1.0)"
        url:
          type: string
          format: uri
          description: URL of the license to link to from the photo
          example: "https://creativecommons.org/publicdomain/zero/1.0/"
      required:
        - "id"
        - "name"
        - "url"

    Photographer:
      description: The creator of a photo
      type: object
      properties:
        name:
          type: string
          description: Username of the photographer
        url:
          type: string
          format: uri
          description: Link to the photographers social media account or homepage
      required:
        - "name"

    PhotoStation:
      description: A station with its photos
      type: object
      properties:
        country:
          $ref: '#/components/schemas/CountryCode'
          description: 2 letter code of the country
          example: "uk"
        id:
          type: string
          description: Id of the station within the country
          example: "7054260"
        title:
          type: string
          description: Title of the station
          example: "London Victoria"
        lat:
          type: number
          format: double
          description: Latitude of the station
        lon:
          type: number
          format: double
          description: Longitute of the station
        shortCode:
          type: string
          description: Provider specific short code of the station, e.g. RIL100 or DS100 for german stations
        inactive:
          type: boolean
          description: Indicates if this station is inactive
          default: false
        photos:
          type: array
          description: Photos of the station. If more than one photo is given, the first one is the primary photo. List might be empty or only the primary photo provided.
          items:
            $ref: '#/components/schemas/Photo'
      required:
        - "country"
        - "id"
        - "title"
        - "lat"
        - "lon"
        - "photos"

    Photo:
      description: A photo of a station
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique id of a photo
        photographer:
          type: string
          description: Name of the photographer
        path:
          type: string
          description: URL path to the photo, to be used together with the photoBaseUrl
        createdAt:
          type: integer
          format: int64
          description: |
            Timestamp when the photo was created in the railway-stations
            database (Epoche milliseconds since 1.1.1970)
        license:
          type: string
          description: Id of the license used for this photo
        outdated:
          type: boolean
          description: Indicates if this photo is outdated
          default: false
      required:
        - "id"
        - "photographer"
        - "path"
        - "createdAt"
        - "license"

    Station:
      description: A railway-station object with location and optional photo
      type: object
      properties:
        idStr:
          type: string
          description: Unique ID of the station per country
        id:
          type: integer
          description: Unique (numeric) ID of the station per country
          deprecated: true
          format: int64
        country:
          $ref: '#/components/schemas/CountryCode'
          description: Two character country code
        title:
          type: string
          description: Name of the station
        photographer:
          type: string
          description: Nickname of the photographer
        photographerUrl:
          type: string
          description: Link to the photographer
        photoUrl:
          type: string
          description: URL of the photo
        photoId:
          type: integer
          description: ID of the photo
          format: int64
        license:
          type: string
          description: |
            License of the photo, clients need to link to an online version
            of the license text
        licenseUrl:
          type: string
          description: |
            The URL of the license text. Clients should use this to link
            to the online version of the license text
        lat:
          type: number
          description: Latitude of the station
          format: double
        lon:
          type: number
          description: Longitute of the station
          format: double
        createdAt:
          type: integer
          description: |
            Timestamp when the photo was created in the railway-stations
            database (Epoche milliseconds since 1.1.1970)
          format: int64
        DS100:
          type: string
          description: A short code of the station, depending on the country
        active:
          type: boolean
        outdated:
          type: boolean
      required:
        - idStr
        - country
        - title
        - lat
        - lon
        - active

    Photographers:
      description: |
        JSON Object with photographers nickname as parameter and number
        of photos as their value
      type: object

    Statistic:
      description: Statistic of number of stations with and without photos
      type: object
      properties:
        total:
          type: integer
          format: int64
        withPhoto:
          type: integer
          format: int64
        withoutPhoto:
          type: integer
          format: int64
        photographers:
          type: integer
          format: int64
        countryCode:
          $ref: '#/components/schemas/CountryCode'
          nullable: true
      required:
        - total
        - withPhoto
        - withoutPhoto
        - photographers

    Country:
      description: Supported Country with its configuration
      type: object
      properties:
        code:
          $ref: '#/components/schemas/CountryCode'
          description: Two letter country code
        name:
          type: string
          description: Name of the country
        email:
          type: string
          description: Email Address to send photos to
        timetableUrlTemplate:
          type: string
          description: |
            URL template for the timetable, contains {title}, {id} and
            {DS100} placeholders which need to be replaced
        overrideLicense:
          type: string
          description: if a country needs a special license
        active:
          type: boolean
          description: Is this an active country where we collect photos?
        providerApps:
          type: array
          description: array with links to provider apps
          items:
            $ref: '#/components/schemas/ProviderApp'
      required:
        - code
        - name
        - active

    ProviderApp:
      description: Provider App information
      type: object
      properties:
        type:
          type: string
          enum:
            - android
            - ios
            - web
        name:
          type: string
        url:
          type: string
      required:
        - type
        - name
        - url

    License:
      description: the only accepted type is "CC0 1.0 Universell (CC0 1.0)", the others are listed for backward compatibility
      type: string
      enum:
        - CC0
        - CC0 1.0 Universell (CC0 1.0)
        - CC4
        - CC BY-SA 4.0
        - UNKNOWN

    UpdateProfile:
      description: User profile information
      type: object
      properties:
        nickname:
          type: string
          maxLength: 50
          minLength: 3
        email:
          type: string
          format: email
          maxLength: 100
          minLength: 3
        license:
          $ref: '#/components/schemas/License'
        photoOwner:
          type: boolean
        link:
          type: string
          format: uri
        anonymous:
          type: boolean
        sendNotifications:
          type: boolean
      required:
        - nickname
        - email
        - license
        - photoOwner

    RegisterProfile:
      description: User profile information
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
          format: email
        license:
          $ref: '#/components/schemas/License'
        photoOwner:
          type: boolean
        link:
          type: string
          format: uri
        anonymous:
          type: boolean
        sendNotifications:
          type: boolean
        newPassword:
          type: string
      required:
        - nickname
        - email
        - license
        - photoOwner

    Profile:
      description: User profile information
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
          format: email
        license:
          $ref: '#/components/schemas/License'
        photoOwner:
          type: boolean
        link:
          type: string
          format: uri
        anonymous:
          type: boolean
        admin:
          type: boolean
        emailVerified:
          type: boolean
        sendNotifications:
          type: boolean
      required:
        - nickname
        - license
        - photoOwner

    InboxResponse:
      description: Response status of photo uploads and problem reports
      type: object
      required:
        - state
      properties:
        state:
          type: string
          enum:
            - REVIEW
            - LAT_LON_OUT_OF_RANGE
            - NOT_ENOUGH_DATA
            - UNSUPPORTED_CONTENT_TYPE
            - PHOTO_TOO_LARGE
            - CONFLICT
            - UNAUTHORIZED
            - ERROR
        message:
          type: string
        id:
          type: integer
          format: int64
        filename:
          type: string
          description: filename in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        crc32:
          description: CRC32 checksum of the uploaded photo
          type: integer
          format: int64

    InboxStateQueryRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
      required:
        - id

    InboxStateQueryResponse:
      description: Inbox state query
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        stationId:
          type: string
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        newTitle:
          type: string
        newLat:
          type: number
          format: double
        newLon:
          type: number
          format: double
        comment:
          type: string
        problemReportType:
          $ref: '#/components/schemas/ProblemReportType'
        rejectedReason:
          type: string
        filename:
          type: string
          description: filename in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        crc32:
          description: CRC32 checksum of the uploaded photo
          type: integer
          format: int64
        state:
          type: string
          enum:
            - UNKNOWN
            - REVIEW
            - CONFLICT
            - ACCEPTED
            - REJECTED
        createdAt:
          type: integer
          format: int64
      required:
        - id
        - state

    PublicInboxEntry:
      description: Represents an uploaded photo under review
      type: object
      properties:
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        stationId:
          type: string
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      required:
        - countryCode
        - stationId
        - title
        - lat
        - lon

    InboxEntry:
      description: Represents an uploaded photo with processing state
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        stationId:
          type: string
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        newTitle:
          type: string
        newLat:
          type: number
          format: double
        newLon:
          type: number
          format: double
        photographerNickname:
          type: string
        photographerEmail:
          type: string
        photoId:
          type: integer
          description: ID of the photo
          format: int64
        comment:
          type: string
        createdAt:
          type: integer
          format: int64
        done:
          type: boolean
          description: true if this photo was already imported or rejected
        filename:
          type: string
          description: name of the file in inbox
        inboxUrl:
          type: string
          description: url of the photo in the inbox
        hasPhoto:
          type: boolean
          description: this station has already a photo (conflict)
        hasConflict:
          type: boolean
          description: conflict with another upload or existing photo
        problemReportType:
          $ref: '#/components/schemas/ProblemReportType'
        isProcessed:
          type: boolean
          description: was this image process (e.g. pixelated)
        active:
          type: boolean
          description: active flag provided by the user
      required:
        - id
        - photographerNickname
        - comment
        - createdAt
        - done
        - hasPhoto

    InboxCommand:
      description: command to import or reject an inbox entry
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          $ref: '#/components/schemas/CountryCode'
          description: country of a new station
        stationId:
          type: string
          description: ID of a new station
        title:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        rejectReason:
          type: string
          description: explanation of a rejection
        DS100:
          type: string
          description: DS100 attribute of a new station
        active:
          type: boolean
          description: active flag of a new station (default true)
        conflictResolution:
          type: string
          description: how to handle conflicts
          enum:
            - DO_NOTHING
            - OVERWRITE_EXISTING_PHOTO
            - IMPORT_AS_NEW_PRIMARY_PHOTO
            - IMPORT_AS_NEW_SECONDARY_PHOTO
            - IGNORE_NEARBY_STATION
        command:
          type: string
          enum:
            - IMPORT_PHOTO
            - IMPORT_MISSING_STATION
            - ACTIVATE_STATION
            - DEACTIVATE_STATION
            - DELETE_STATION
            - DELETE_PHOTO
            - MARK_SOLVED
            - REJECT
            - CHANGE_NAME
            - UPDATE_LOCATION
            - PHOTO_OUTDATED
      required:
        - id
        - command

    InboxCountResponse:
      description: counts the pending inbox entries
      type: object
      properties:
        pendingInboxEntries:
          type: integer
          format: int64
      required:
        - pendingInboxEntries

    AdminInboxCommandResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
      required:
        - status
        - message

    NextZResponse:
      type: object
      properties:
        nextZ:
          type: string
      required:
        - nextZ

    ProblemReport:
      description: Represents a report of a problem with a station
      type: object
      properties:
        countryCode:
          $ref: '#/components/schemas/CountryCode'
        stationId:
          type: string
        title:
          type: string
          description: a new title for the station
        photoId:
          type: integer
          format: int64
          description: Unique id of a photo, can be used for WRONG_PHOTO and PHOTO_OUTDATED type.
        comment:
          type: string
        type:
          $ref: '#/components/schemas/ProblemReportType'
        lat:
          type: number
          format: double
          description: new latitude value for the station
        lon:
          type: number
          format: double
          description: new longitude value for the station
      required:
        - countryCode
        - stationId
        - comment
        - type

    ProblemReportType:
      type: string
      enum:
        - WRONG_LOCATION
        - STATION_INACTIVE
        - STATION_ACTIVE
        - STATION_NONEXISTENT
        - WRONG_NAME
        - WRONG_PHOTO
        - PHOTO_OUTDATED
        - OTHER
        - DUPLICATE

    ChangePassword:
      type: object
      properties:
        newPassword:
          type: string
      required:
        - newPassword

    GeneralErrorMessage:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
      required:
        - status
        - message

    CountryCode:
      type: string
      maxLength: 2
      minLength: 2
